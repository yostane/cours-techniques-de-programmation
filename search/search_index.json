{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenue au cours \"Maitrise des techniques de programmation\"","text":"","tags":["introduction"]},{"location":"#introduction","title":"Introduction","text":"<p>La programmation, aussi appel\u00e9e d\u00e9veloppement logiciel, consiste \u00e0 \u00e9crire du code qui va \u00eatre ex\u00e9cut\u00e9 par une machine. On peut la consid\u00e9rer comme une forme d'art comme l'\u00e9criture litt\u00e9raire o\u00f9 les d\u00e9veloppeurs codent de fa\u00e7on libre, innovante et imaginative. On y trouve aussi une certaine forme de rigueur, notamment dans les applications o\u00f9 la productivit\u00e9 et la stabilit\u00e9 sont de points critiques.</p> <p>Avec le temps, le d\u00e9veloppement logiciel a gagn\u00e9 en maturit\u00e9 et certaines fa\u00e7ons d'\u00e9crire du code sont apparues et ont \u00e9t\u00e9 \u00e9prouv\u00e9es. On appelle cela les techniques de programmation.</p> <p>Ce cours initie \u00e0 ce sujet vaste et excitant.</p>","tags":["introduction"]},{"location":"#plan-du-cours","title":"Plan du cours","text":"<p>La suite de ce chapitre listera les pr\u00e9requis. Ensuite, nous verrons quelques g\u00e9n\u00e9ralit\u00e9s li\u00e9es</p>","tags":["introduction"]},{"location":"#prerequis","title":"Pr\u00e9requis","text":"","tags":["introduction"]},{"location":"#ressources-et-liens-utiles","title":"Ressources et liens utiles","text":"<ul> <li>Cours de programmation de l'UCL</li> <li>emojipedia</li> <li>Complete list of github markdown emoji markup</li> <li>mkdocs material</li> </ul>","tags":["introduction"]},{"location":"#license","title":"License","text":"<p>Ce support de cours est disponible sous licence Creative Commons Attribution 4.0 International (CC BY 4.0)</p> <p></p>","tags":["introduction"]},{"location":"avance/","title":"Pratiques et styles de d\u00e9veloppement","text":"<p>Nous allons parcourir bri\u00e8vement quelques pratiques int\u00e9ressantes.</p>","tags":["techniques"]},{"location":"avance/#tdd-test-driven-development","title":"TDD (Test Driven Development)","text":"<p>Consiste \u00e0 d'abord \u00e9crire les tests, puis impl\u00e9menter le code.</p>","tags":["techniques"]},{"location":"avance/#pair-programming","title":"Pair programming","text":"<p>Consiste \u00e0 programmer avec un autre d\u00e9veloppeur.</p>","tags":["techniques"]},{"location":"avance/#revues-de-code","title":"Revues de code","text":"<ul> <li>Consiste \u00e0 faire relire son d\u00e9veloppement par un autre d\u00e9veloppeur.</li> <li>Une m\u00e9thode fr\u00e9quente est d'effectuer son d\u00e9veloppement sur une branche et faire valider cette derni\u00e8re avant de la fusionner dans la branche principale.</li> <li>G\u00e9n\u00e9ralement, le LeadDev intervient dans la plupart des revues de code.</li> <li>GitHub et GitLab simplifient ce processus via les MR (Merge Request) et PR (Pull Request).</li> </ul>","tags":["techniques"]},{"location":"avance/#references","title":"R\u00e9f\u00e9rences","text":"<ul> <li>Test Driven Development With TypeScript</li> <li>TDD vs. BDD vs. ATDD and other Agile development techniques</li> <li>What other types of development are there besides Test Driven Development?</li> <li>Comment Diffuser Des Pratiques Techniques Comme Le TDD Dans Une Organisation</li> </ul>","tags":["techniques"]},{"location":"func/","title":"Programmation fonctionnelle","text":"<p>La programmation fonctionnelle s'articule autour de ces concepts : fonctions pures, r\u00e9cursivit\u00e9, transparence r\u00e9f\u00e9rentielle, variables immuables, fonctions en tant que citoyens de premi\u00e8re classe et fonctions d'ordre sup\u00e9rieur.</p> <p>Programmation fonctionnelle pure</p> <p>Les langages fonctionnels qualifi\u00e9s de pures comme haskell n'admettent que la programmation fonctionnelle.</p>","tags":["techniques","fonctionnel"]},{"location":"func/#immutabilite","title":"Immutabilit\u00e9","text":"<ul> <li>L'immutabilit\u00e9 signifient qu'on ne peut pas changer la valeur d'une variable ou ses propri\u00e9t\u00e9s une fois qu'elle a \u00e9t\u00e9 cr\u00e9\u00e9e.</li> <li>Pour changer de valeur, nous devons cr\u00e9er une copie tout en renseignant les nouvelles valeur.</li> <li>Avec les objets, on classifie l'immutabilit\u00e9 en deux cat\u00e9gories:<ul> <li>Immutabilit\u00e9 profonde: On ne peut pas modifier un objet ou ses membres quelque soit leurs niveaux de hi\u00e9rarchie ou leurs profondeurs <code>o.a.b.c...</code>. Dans le cas d'une collection, on ne peut plus lui ajouter ou supprimer d'\u00e9l\u00e9ments.</li> <li>Immutabilit\u00e9 peu profonde: On ne peut pas modifier la variable en elle m\u00eame mais on peut modifier ses membres si c'est un objet ou ajouter et supprimer des \u00e9l\u00e9ments si c'est une collection.</li> </ul> </li> <li>Avec les tableaux, on a deux types d'immutabilit\u00e9:<ul> <li>Tableau immutable: On ne peut ni ajouter ou supprimer des \u00e9l\u00e9ments, ni changer la valeur des \u00e9l\u00e9ments existants.</li> <li>Tableau en lecture seule: On ne peut ni ajouter ou supprimer des \u00e9l\u00e9ments mais on peut changer la valeur des \u00e9l\u00e9ments existants.</li> </ul> </li> <li>L'immutabilit\u00e9 profonde est la meilleure forme d'immutabilit\u00e9.<ul> <li>En TypeScript, on peut le satisfaire en d\u00e9clarant syst\u00e9matiquement en <code>readonly</code> toutes les propri\u00e9t\u00e9s et les tableaux.</li> <li>En Rust, tout est immutable par d\u00e9faut sauf si on utilise le qualificateur <code>mut</code>.</li> </ul> </li> <li>La modification d'un objet immutable se fait sur une copie profonde. Cette derni\u00e8re peut \u00eatre r\u00e9alis\u00e9e en une seule ligne ou \u00e0 la main (en copiant les champs un par un), selon le langage utilis\u00e9.</li> </ul> <p>Limite avec les fonctions de clonage profond</p> <p>Les fonctions de clonage profond qui ne permettent pas de sp\u00e9cifier les propri\u00e9t\u00e9s \u00e0 modifier ne sont pas utiles car elles g\u00e9n\u00e8rent une copie conforme \u00e0 l'original qu'on ne pourra plus modifier.</p> Immutabilit\u00e9<pre><code>const items: readonly number[] = [1, 2];\n\n// compile error\n//items[0] = 2;\n\nclass Sauce {\n  constructor(\n    readonly mainIngredient: string,\n    readonly secondaryIngredient: string\n  ) {}\n}\n\nclass Kebab {\n  constructor(\n    readonly name: string,\n    readonly sauce: Sauce,\n    readonly ingredients: readonly string[]\n  ) {}\n}\n\nconst k1 = new Kebab(\"miam\", new Sauce(\"tomate\", \"huile\"), [\"Salade, Oignons\"]);\nconsole.log(k1);\n// deep copy, but useless here because we can't touch k2\nconst k2 = structuredClone(k1);\nconsole.log(k2);\n\n// Manual deep copy\nconst k3 = new Kebab(k1.name, k1.sauce, [\"Olives\"]);\nconsole.log(k3);\n</code></pre>","tags":["techniques","fonctionnel"]},{"location":"func/#fonctions-pures-et-transparence-referentielle","title":"Fonctions pures et transparence r\u00e9f\u00e9rentielle","text":"<ul> <li>Les fonctions pures sont des fonctions qui n'ont pas d'effets secondaires et renverront donc toujours la m\u00eame sortie \u00e9tant donn\u00e9 la m\u00eame entr\u00e9e.</li> <li>Transparence r\u00e9f\u00e9rentielle : signifie qu'une expression peut \u00eatre remplac\u00e9e par son r\u00e9sultat sans modifier le comportement du programme.<ul> <li> La transparence fait r\u00e9f\u00e9rence au fait que impl\u00e9mentation de l'expression n'est pas pertinente.</li> </ul> </li> </ul> <pre><code>/**\n * A pure function return the same output for the same input and does have side-effects\n */\nfunction add(a: number, b: number) {\n  return a + b;\n}\n\n/**\n * This function is impure because it does not always return the same output given the same input\n */\nfunction addImpure1(a: number, b: number) {\n  return a + b + Math.random();\n}\n\n/**\n * This function is impure because it has a side effect (write to the console)\n */\nfunction addImpure2(a: number, b: number) {\n  console.log(a, b);\n  return a + b;\n}\n</code></pre>","tags":["techniques","fonctionnel"]},{"location":"func/#les-fonctions-comme-citoyens-de-premiere-classe","title":"Les fonctions comme citoyens de premi\u00e8re classe","text":"<ul> <li>Les fonctions sont des citoyens de premi\u00e8re classe : elles peuvent \u00eatre affect\u00e9es \u00e0 une variable ou utilis\u00e9es dans des fonctions d'ordre sup\u00e9rieur (pass\u00e9es en tant que param\u00e8tre de fonction \u00e0 une autre fonction ou renvoy\u00e9es par une fonction).</li> <li>La plupart des langages permettent d'assigner de fa\u00e7on plus concise une fonction \u00e0 une variable ou un argument.<ul> <li>C'est syntaxe a plusieurs noms, le plus commun est fonction lambda.</li> <li>En TypeScript, on l'appelle fonction fl\u00e8che</li> </ul> </li> </ul> <pre><code>function add(a: number, b: number) {\n  return a + b;\n}\n\n// a variable can point to a function\nconst f = add;\n// As any usual variable, functions have a type (arg1: type1, ...) =&gt; return type\nconst g: (x: number, y: number) =&gt; number = add;\n// A function used without () is not called and point to the location of its code\nconsole.log(\"Function reference\", f, add);\n// A function reference can be called as any function\nconsole.log(\"Function call\", f(1, 2), add(2, -10));\n\n// Arrow functions allow to assign a function to a vartiable or argument more quickly\n// They are also called lambdas in other languages\nconst h = (x: number, y: number) =&gt; {\n  return x * y;\n};\n\n/**\n * Arrow functions can be written in a single line\n * @param x\n * @param y\n * @returns the result of the expression x / y\n */\nconst p = (x: number, y: number) =&gt; x / y;\n\n/**\n * compte is called a higher order function because\n * @param a left operand\n * @param b right operand\n * @param f a function that will be called with a and b as arguments\n */\nfunction compute(a: number, b: number, f: (x: number, y: number) =&gt; number) {\n  const result = f(a, b);\n  console.log(\"f(a, b)\", result);\n}\n\nconsole.log(\"compute call 1\");\ncompute(5, 3, add);\nconsole.log(\"compute call 2\");\ncompute(5, 3, h);\n\n// arrow functions allow to write more concise code in this case\ncompute(5, 3, (x, y) =&gt; x - y);\n</code></pre>","tags":["techniques","fonctionnel"]},{"location":"func/#programmation-declarative","title":"Programmation d\u00e9clarative","text":"<ul> <li>La programmation usuelle est appepl\u00e9e programmation imp\u00e9rative et r\u00e9sout le probl\u00e8me sous forme d'une suite d'instructions qui d\u00e9crivent comment le programme doit se comporter \u00e9tape par \u00e9tape.<ul> <li>La boucle for est un exemple souvent utilis\u00e9 pour illustrer la programmation imp\u00e9rative.</li> </ul> </li> <li>La programmation fonctionnelle d\u00e9crit le r\u00e9sultat sous d'un enchainements de fonctions.</li> <li>Permet d'exprimer ce que l'on veut obtenir mais pas comment l'obtenir.</li> <li>Les fonctions les plus connues sont: filter, map et reduce.</li> </ul> <pre><code>const words = [\"I\", \"love\", \"TypeScript\", \"in\", \"2022\"];\n\n// Count the total number of letters for all words that contain the letter 'i'\n\nlet totalImperative = 0;\nfor (const word of words) {\n  if (word.includes(\"i\")) {\n    totalImperative += word.length;\n  }\n}\nconsole.log(\"Imperative style: \", totalImperative);\n\nconst totalDeclarative = words\n  .filter((w) =&gt; w.includes(\"i\"))\n  .map((w) =&gt; w.length)\n  .reduce((acc, cur) =&gt; acc + cur, 0);\n\nconsole.log(\"Declarative style:\", totalDeclarative);\n</code></pre>","tags":["techniques","fonctionnel"]},{"location":"func/#exercices","title":"Exercices","text":"<ul> <li>Impl\u00e9menter une fonction qui g\u00e9n\u00e8re un tableau d'entiers al\u00e9atoires.</li> <li>En utilisant un style d\u00e9claratif (filter, map, reduce), calculer:<ul> <li>La somme des \u00e9l\u00e9ments de la liste</li> <li>La somme du double de chaque \u00e9l\u00e9ment</li> <li>Le produit des exponentielles des \u00e9l\u00e9ments pairs</li> <li>La plus grande valeur inf\u00e9rieur \u00e0 la moyenne</li> </ul> </li> <li>Cr\u00e9er une classe <code>BinaryCalculator</code> qui prend une fonction en argument du constructeur. Cette fonction prend deux nombres en entr\u00e9e et retourne un nombre.<ul> <li>D\u00e9finir la m\u00e9thode <code>run</code> qui prend deux nombres en argument qu'on appellera <code>a</code> et <code>b</code> et ex\u00e9cute la m\u00e9thode pass\u00e9e dans le constructeur en lui passant <code>a</code> et <code>b</code>. Si cette derni\u00e8re retourne une valeur sup\u00e9rieure \u00e0 10, la m\u00e9thode <code>run</code> affiche un message de succ\u00e8s, sinon la m\u00e9thode <code>run</code> affiche un message d'erreur.</li> <li>D\u00e9finir la m\u00e9thode <code>runWithCallbacks</code> qui prend deux nombres en argument qu'on appellera <code>a</code> et <code>b</code> ainsi que deux fonctions qu'on appellera <code>success</code> et <code>failure</code> respectivement.<ul> <li><code>runWithCallbacks</code> ex\u00e9cute la m\u00e9thode pass\u00e9e dans le constructeur. Si cette derni\u00e8re retourne une valeur sup\u00e9rieure \u00e0 10, <code>success</code> est appel\u00e9e en lui passant la valeur calcul\u00e9e, sinon <code>failure</code> est appel\u00e9e en lui passant un message d'erreur.</li> <li>On vous laisse le soin de d\u00e9finir le type de <code>success</code> et <code>failure</code> selon le besoin exprim\u00e9 plus haut.</li> </ul> </li> </ul> </li> <li>Instancier la classe <code>BinaryCalculator</code> pour faire de l'addition. Appeler les m\u00e9thodes <code>run</code> et <code>runWithCallbacks</code> pour les arguments 5 et 1. Appeler les m\u00e9thodes <code>run</code> et <code>runWithCallbacks</code> plusieurs fois pour faire de l'addition de 5 et un nombre al\u00e9atoire entre 0 et 10.</li> <li>Instancier la classe <code>BinaryCalculator</code> pour calcule le minimum. Appeler les m\u00e9thodes <code>run</code> et <code>runWithCallbacks</code> pour les arguments 5 et 20 puis pour 15 et 20.</li> </ul> Solution <pre><code>function randomIntFromInterval(min: number, max: number): number {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction createRandomNumbers(): number[] {\n  return [...Array(10).keys()].map(() =&gt; randomIntFromInterval(0, 20));\n}\n\nconst numbers = createRandomNumbers();\nconsole.log(numbers);\n\nconst sum = numbers.reduce((acc, cur) =&gt; acc + cur, 0);\nconst sumOfDouble = numbers\n  .map((x) =&gt; x * 2)\n  .reduce((acc, cur) =&gt; acc + cur, 0);\nconst sumOfDouble2 = numbers.reduce((acc, cur) =&gt; acc + cur * 2, 0);\nconst productOfExponentialEven = numbers\n  .filter((x) =&gt; x % 2 === 0)\n  .map((x) =&gt; Math.exp(x))\n  .reduce((acc, cur) =&gt; acc * cur, 1);\nconst avg = sum / numbers.length;\nconst beforeAvg = numbers\n  .filter((x) =&gt; x &lt; avg)\n  .reduce((acc, cur) =&gt; Math.max(acc, cur), -Infinity);\nconst beforeAvg2 = numbers\n  .filter((x) =&gt; x &lt; avg)\n  .reduce((acc, cur) =&gt; (acc &gt; cur ? acc : cur), -Infinity);\nconsole.log(\n  \"sum\",\n  sum,\n  \"sumOfDouble\",\n  sumOfDouble,\n  \"productOfExponentialEven\",\n  productOfExponentialEven,\n  \"avg\",\n  avg,\n  \"beforeAvg\",\n  beforeAvg,\n  beforeAvg2\n);\n\nclass BinaryCalculator {\n  constructor(readonly f: (x: number, y: number) =&gt; number) {}\n  run(a: number, b: number) {\n    const r = this.f(a, b);\n    if (r &gt; 10) {\n      console.log(\"succes\", r);\n    } else {\n      console.log(\"failure\", r);\n    }\n  }\n  runWithCallbacks(\n    a: number,\n    b: number,\n    success: (x: number) =&gt; void,\n    failure?: (x: { code: number; message: string }) =&gt; void\n  ) {\n    const r = this.f(a, b);\n    if (r &gt; 10) {\n      success(r);\n    } else if (failure !== undefined) {\n      failure({\n        code: 1,\n        message: \"Aie aie aie\",\n      });\n    }\n  }\n}\n\nconst adder = new BinaryCalculator((x, y) =&gt; x + y);\nadder.run(10, 5);\nadder.runWithCallbacks(\n  0,\n  5,\n  (x) =&gt; console.log(\"yahoo ! \", x),\n  (e) =&gt; console.error(\"code:\", e.code, \"message:\", e.message)\n);\n\nadder.runWithCallbacks(10, 5, (x) =&gt; console.log(\"yahoo ! \", x));\n\nconst minimizer = new BinaryCalculator(Math.min);\nminimizer.run(10, 5);\nminimizer.runWithCallbacks(\n  0,\n  5,\n  (x) =&gt; console.log(\"yahoo ! \", x),\n  (e) =&gt; console.error(\"code:\", e.code, \"message:\", e.message)\n);\n\nminimizer.runWithCallbacks(12, 15, (x) =&gt; console.log(\"yahoo ! \", x));\n</code></pre>","tags":["techniques","fonctionnel"]},{"location":"func/#sources","title":"Sources","text":"<ul> <li>learning-kotlin</li> <li>Rust: Constants, Variables, and Mutability - Oh My!</li> <li>Mutable and Immutable Arrays</li> <li>What pure functional programming is all about</li> </ul>","tags":["techniques","fonctionnel"]},{"location":"generalites/","title":"G\u00e9n\u00e9ralit\u00e9s","text":"","tags":["introduction","techniques"]},{"location":"generalites/#concepts-de-base-en-programmation","title":"Concepts de base en programmation","text":"<ul> <li>Variables et constantes.<ul> <li>\ud83d\udca1 Losque le langage permet d'en cr\u00e9er facilement (exemples: JS, TS et Kotlin), il est recommand\u00e9 de cr\u00e9er des constantes par d\u00e9faut et de changer en variables au besoin.</li> </ul> </li> <li>Fonctions et arguments.<ul> <li>\ud83d\udca1 Beaucoup de langages permettent de donner des valeurs par d\u00e9faut aux arguments.</li> </ul> </li> <li>Structures de contr\u00f4le: if, for, for-each, while</li> <li>Interpolation de cha\u00eenes de caract\u00e8res.</li> <li>Diff\u00e9rence entre typage statique et dynamique.<ul> <li>Typage statique: le type d'une variable ou d'un argument ne change pas.</li> <li>Typage dynamique: le type d'une variable ou d'un argument peut changer.</li> </ul> </li> <li>Si le compilateur d\u00e9duit le type d'une donn\u00e9e dans certaines situation sans qu'on ait \u00e0 l'expliciter, on dit que c'est un typage implicite. C'est aussi appel\u00e9 l'inf\u00e9rence de types.</li> </ul> <p>Pr\u00e9fixer ses classes, fonctions, variables et constantes par <code>export</code> permet de les rendre accessibles dans d'autres fichiers.</p> static_demo.ts<pre><code>// M\u00e9thode globale (pas conseill\u00e9e si on veut suivre l'orient\u00e9 objet)\nexport function subsctract(x: number, y: number): number {\n  return x - y;\n}\n\nexport const gravity = 10;\n\nexport class MathUtils {\n  // doit \u00eatre appel\u00e9 depuis la classe\n  static readonly PI = 3.14;\n  // doit \u00eatre appel\u00e9 depuis la classe\n  static add(x: number, y: number): number {\n    return x + y;\n  }\n  // doit \u00eatre appel\u00e9 depuis une instance\n  multiply(x: number, y: number): number {\n    return x * y;\n  }\n}\n\nconsole.log(MathUtils.PI);\nconsole.log(MathUtils.add(2, 5));\n\nconst mu = new MathUtils();\nconsole.log(mu.multiply(2, 5));\n\n// erreur\n//console.log(MathUtils.multiply(2, 5));\n\n// On ne peut pas appeler du statique depuis un objet en TS\n// console.log(mu.PI);\n// console.log(mu.add(2, 5));\n</code></pre> <p>Des clauses <code>import</code> en d\u00e9but de fichier permettent d'utiliser des symboles export\u00e9s par d'autres fichiers. Le doc de MDN montre les diff\u00e9rentes syntaxes possibles de la clause <code>import</code>.</p> import_demo.ts<pre><code>import { MathUtils, subsctract, gravity } from \"./static_demo\";\n\nconsole.log(MathUtils.PI);\nconsole.log(subsctract(10, -4), gravity);\n</code></pre>","tags":["introduction","techniques"]},{"location":"generalites/#export-et-import-en-typescript","title":"Export et import en TypeScript","text":"Quick tour of TypeScript<pre><code>let amount: number = 400;\n//amount = \"Hello\"; // error because TS est statically typed\n\n// TypeScript allows to type implicitly in certain situations\nconst message = \"hello\";\n\nfunction sayHello(s: string) {\n  console.log(s);\n}\nsayHello(\"Hello\");\n\n// Type unions allows to allow multiple types to the same variable\nlet x: number | string = \"Hello\";\nx = 5;\nconsole.log(x);\n\n// String interpolation possible with back-tick `\nconsole.log(`I am an interpolated string ${x}, ${message}`);\n</code></pre>","tags":["introduction","techniques"]},{"location":"generalites/#regles-de-nommage","title":"R\u00e8gles de nommage","text":"<ul> <li>Une variable porte un nom passif qui commence par une majuscule</li> <li>Une variable de type collection (tableau, liste, etc.) porte un nom au pluriel</li> <li>Le nom d'une fonction commence par un verbe.<ul> <li>Dans la plupart des langages, le nom d'une fonction commence par une minuscule.</li> </ul> </li> <li>Respecter le type de s\u00e9paration entre les mots d'un identifiant<ul> <li>Kamel case</li> <li>Snake case</li> <li>Kebab case</li> </ul> </li> </ul>","tags":["introduction","techniques"]},{"location":"projet/","title":"Projet","text":"","tags":["Pratique"]},{"location":"projet/#expose-sur-une-technique-de-programmation","title":"Expos\u00e9 sur une technique de programmation","text":"<ul> <li>R\u00e9aliser un expos\u00e9 sur une technique de programmation non vue en cours.</li> <li>La restitution se fera via une pr\u00e9sentation (explication, int\u00e9r\u00eat, bonnes pratiques, etc.) et une d\u00e9mo accompagn\u00e9e de l'explication de son code. La dur\u00e9e totale est de 5 \u00e0 10 mintues.</li> <li>Sujets:<ul> <li>Design Pattern MVVM</li> <li>Design Pattern MVC</li> <li>Les acronymes du MVC: DTO, DAO, PO, SO, BO, VO</li> <li>Design Pattern MVP</li> <li>Injection de d\u00e9pendances</li> <li>Machine \u00e0 \u00e9tats / Automate fini</li> <li>Interface Oriented Programming et Protocol Oriented Programming</li> <li>Single Responsibility Principle</li> <li>Secure by default</li> <li>self documenting code</li> <li>Documentation via sketchnotes</li> <li>Architecture Decision Records (ADR)</li> <li>GitHub Actions</li> <li>G\u00e9n\u00e9rateurs de code source</li> <li>Software Craftsmanship</li> <li>Domain Specific Language (DSL)</li> <li>Aspect Oriented Programming</li> </ul> </li> </ul>","tags":["Pratique"]},{"location":"poo/","title":"La programmation orient\u00e9e objet (POO)","text":""},{"location":"poo/#motivation","title":"Motivation","text":"<p>Voyons int\u00e9r\u00eat de la poo \u00e0 travers cet exercice: nous souhaitons g\u00e9rer une liste de monstres dans un jeu. Chaque monstre est d\u00e9fini par ces deux propri\u00e9t\u00e9s: son nom et ses points de vie (PV ou HP). On veut d\u00e9finir une fonction qui permet d'afficher si on monstre est vivant ou mort (selon ses PV).</p> <p>Si on veut faire cet exercice de fa\u00e7on na\u00efve et sans utiliser l'orient\u00e9 objet, on utiliserait une variable pour chaque monstre et pour chacune de ses propri\u00e9t\u00e9s. Cela donnerait ce code:</p> <pre><code>const monsterName1 = \"Lapinou\";\nconst monsterHp1 = 100;\n\nconst monsterName2 = \"Chatounet\";\nconst monsterHp2 = 0;\n\nfunction checkMonsterAlive(name: string, hp: number) {\n  if (hp &lt;= 0) {\n    console.log(name, \"est ko \ud83d\udc80\");\n  } else {\n    console.log(name, \"est va bien \ud83d\udc4c\");\n  }\n}\n\ncheckMonsterAlive(monsterName1, monsterHp1);\ncheckMonsterAlive(monsterName2, monsterHp2);\n\nconst monsters = [monsterName1, monsterHp1, monsterName2, monsterHp2];\ncheckMonsterAlive(monsters[0] as string, monsters[1] as number);\n</code></pre> <p>Quels inconv\u00e9nients voyez-vous dans ce code ?</p> Quelque r\u00e9ponses <ul> <li>Il faut changer la signature de la fonction d\u00e8s qu'on apporte des modifications aux propri\u00e9t\u00e9s (renommage, ajoute, suppression)</li> <li>Pour chaque monstre, il faut manipuler (nbPropri\u00e9t\u00e9s * nbMonstres) variables</li> <li>Placer des monstres dans une liste est compliqu\u00e9 et encourage le risque d'erreurs<ul> <li>Par exemple, le fait d'avoir des types h\u00e9t\u00e9rog\u00e8nes dans une liste est complexe \u00e0 g\u00e9rer</li> </ul> </li> </ul> <p>Une technique de programmation qui permet de palier \u00e0 cela est la programmation orient\u00e9e objet qu'on abr\u00e9gera poo dans la suite. L'exercice, donnera cela en poo:</p> <pre><code>class Monster {\n  constructor(readonly name: string, readonly hp: number) {}\n\n  checkAlive() {\n    if (this.hp &lt;= 0) {\n      console.log(this.name, \"est ko \ud83d\udc80\");\n    } else {\n      console.log(this.name, \"est va bien \ud83d\udc4c\");\n    }\n  }\n}\n\nconst monster1 = new Monster(\"Lapinou\", 100);\nconst monster2 = new Monster(\"Chatounet\", 0);\n\nmonster1.checkAlive();\nmonster2.checkAlive();\n\nconst monsters = [monster1, monster2];\nmonsters[0].checkAlive();\n</code></pre> <p>Quels avantages et inconv\u00e9nients voyez-vous dans ce code ?</p> Quelque r\u00e9ponses <ul> <li>Inconv\u00e9nients<ul> <li>Nouvelle syntaxe \u00e0 apprendre avec de nouveaux mots: class, readonly, this</li> </ul> </li> <li>Avantages (qui prennent le dessus sur les inconv\u00e9nients)<ul> <li>Le code qui concerne les monstres est mis ensemble. On parle d'encapsulation</li> <li>La gestion d'une liste de monstres est plus lisible et simple</li> <li>La fonction checkAlive est plus simple \u00e0 maintenir si on change des propri\u00e9t\u00e9s</li> </ul> </li> </ul>"},{"location":"poo/caracteristiques/","title":"Quelques caract\u00e9ristiques de la POO","text":""},{"location":"poo/caracteristiques/#classes-abstraites-et-interfaces","title":"Classes abstraites et Interfaces","text":"<ul> <li>Une classe abstraite ou une interface ne peuvent \u00eatre instanci\u00e9s sauf via un objet anonyme (exemple en TS).</li> <li>Les classes abstraites et interfaces sont consid\u00e9r\u00e9s comme des contrats.</li> <li>Une interface liste des membres sans impl\u00e9mentation.</li> <li>Une classe abstraite liste des membres avec ou sans impl\u00e9mentation.</li> <li>Une classe (abstraite ou non) peut h\u00e9riter d'une seule classe (abstraite ou non) et de plusieurs interfaces.</li> <li> Certaines langages autorisent l'h\u00e9ritage multiple de classes.</li> <li> En typescript, un objet est compatible avec tout object qui a les m\u00eames champs sans avoir \u00e0 explicitement impl\u00e9menter son interface ou classe. On dit que c'est du duck typing; si \u00e7a marche et se comporte comme un canard, alors c'est un canard.</li> </ul> TypeScript Classes abstraites et Interfaces<pre><code>interface Shooter {\n  readonly shootPower: number;\n  shoot(): void;\n}\ninterface Transporter {\n  readonly numberOfPeople: number;\n}\nabstract class Ship {\n  constructor(protected speed: number) {\n    console.log(\"Ship constructor\");\n  }\n  abstract move(): void;\n  sayHello() {\n    console.log(\"Hello\");\n  }\n}\n\nclass SpaceShip extends Ship implements Shooter, Transporter {\n  constructor(\n    speed: number,\n    readonly staelliteCount: number,\n    readonly numberOfPeople: number,\n    readonly shootPower: number\n  ) {\n    console.log(\"SpaceShip constructor before super\");\n    super(speed);\n    console.log(\"SpaceShip constructor after super\");\n  }\n  move(): void {\n    console.log(\"VROOOM\");\n  }\n  shoot(): void {\n    console.log(`Shooting with power ${this.shootPower}`);\n  }\n}\n\nconst spaceShip = new SpaceShip(1000, 5, 500, 10);\nspaceShip.shoot();\nconsole.log(\"The space ship has \", spaceShip.staelliteCount, \" sattelites\");\n\nfunction checkPower(shooter: Shooter) {\n  console.log(\"The shooter has power of\", shooter.shootPower);\n}\n\ncheckPower(spaceShip);\n\nconst literalShooter: Shooter = {\n  shootPower: 6,\n  shoot() {\n    console.log(\"pew pew\");\n  },\n};\nliteralShooter.shoot();\ncheckPower(literalShooter);\n</code></pre>"},{"location":"poo/caracteristiques/#objets-litteraux","title":"Objets litt\u00e9raux","text":"<ul> <li>Certains langages permettent de cr\u00e9er des objets sans instancier une classe (non abstraite)</li> <li>Les propri\u00e9t\u00e9s et m\u00e9thodes sont donn\u00e9es directement lors de la d\u00e9finition de l'objet.</li> </ul> Objets litt\u00e9raux<pre><code>const ship1 = {\n  price: 20000,\n  name: \"The decennial Eagle\",\n  shootPower: 6,\n  shoot() {\n    console.log(\"pew pew\");\n  },\n};\n\nship1.shoot();\n\ninterface Shooter {\n  readonly shootPower: number;\n  shoot(): void;\n}\nfunction checkPower(shooter: Shooter) {\n  console.log(\"The shooter has power of\", shooter.shootPower);\n}\n\ncheckPower(ship1);\n\nconst serpent = {\n  shootPower: 1,\n  shoot() {\n    console.log(\"pew pew\");\n  },\n};\n\ncheckPower(serpent);\n\nconst cat = {\n  name: \"chat-pardeur\",\n};\n\n// checkPower(cat); // fails\n</code></pre>"},{"location":"poo/caracteristiques/#proprietes-et-accesseurs","title":"Propri\u00e9t\u00e9s et accesseurs","text":"<ul> <li>Une propri\u00e9t\u00e9 permet d'acc\u00e9der et / ou modifier une donn\u00e9e de l'objet avec la syntaxe <code>objet.propri\u00e9t\u00e9</code></li> <li>Quand un propri\u00e9t\u00e9 est utilis\u00e9e en lecture, l'objet appelle une m\u00e9thode qui retourne la valeur de la propri\u00e9t\u00e9. Cette m\u00e9thode est appel\u00e9e getter</li> <li>Quand on affecte une valeur \u00e0 une propri\u00e9t\u00e9, l'objet appelle une m\u00e9thode qui modifie la valeur propri\u00e9t\u00e9. Cette m\u00e9thode est appel\u00e9e setter</li> <li>Les getters et setters sont appel\u00e9es accesseurs</li> <li> Certains langages g\u00e8rent nativement les accesseurs</li> <li>Dans la plupart des cas, une propri\u00e9t\u00e9 repose sur un variable priv\u00e9e de la classe.</li> <li> On appelle ce genre de champ, un backing field</li> <li>Les langages qui g\u00e8rent nativement les propri\u00e9t\u00e9s utilisent un backing field par d\u00e9faut et nous permettent de personnaliser les accesseurs par la suite.</li> <li>Les langages qui g\u00e8rent moins bien les propri\u00e9t\u00e9s laissent au d\u00e9veloppeur le soin de pr\u00e9voir des m\u00e9thodes getPropri\u00e9t\u00e9 et setPropri\u00e9t\u00e9 en avance.</li> </ul> Propri\u00e9t\u00e9s<pre><code>class Mage {\n  // Deux propri\u00e9t\u00e9s dont le backing field est g\u00e9n\u00e9r\u00e9 automatiquement\n  constructor(public name: string, public hp: number) {}\n}\n\n// La propri\u00e9t\u00e9 name a des accesseurs peronnalis\u00e9s\nclass OtherMage {\n  constructor(name: string, public hp: number) {\n    this._name = name;\n  }\n\n  // backing field\n  private _name: string;\n\n  get name() {\n    console.log(\"\ud83e\uddf9 getting name\", this._name);\n    return this._name;\n  }\n\n  set name(value) {\n    console.log(\"\ud83e\uddd9 setting name with new value\", value);\n    this._name = value.toLowerCase();\n    console.log(\"\ud83e\uddd9\ud83c\udffe name with new value\", this._name);\n  }\n}\n\nconst mage = new Mage(\"magus\", 10);\nmage.name = \"magicus\";\nconsole.log(mage.name);\n\nconst otherMage = new OtherMage(\"sorcellus\", 100);\notherMage.name = \"sorcellicus\";\nconsole.log(otherMage.name);\n</code></pre>"},{"location":"poo/caracteristiques/#membres-statiques","title":"Membres statiques","text":"<ul> <li>Un membre statique d'une classe est utilisable sans cr\u00e9er d'instance particuli\u00e8re</li> <li>On peut appeler ou acc\u00e9der \u00e0 un membre statique depuis le nom de la classe. Certains langages permettent d'y acc\u00e9der aussi depuis une instance.</li> <li>Les membres statiques peuvent \u00eatre consid\u00e9r\u00e9es comme des variables et fonctions globales, sauf qu'elles sont class\u00e9es dans une classe</li> </ul> Propri\u00e9t\u00e9s<pre><code>// M\u00e9thode globale (pas conseill\u00e9e si on veut suivre l'orient\u00e9 objet)\nexport function subsctract(x: number, y: number): number {\n  return x - y;\n}\n\nexport const gravity = 10;\n\nexport class MathUtils {\n  // doit \u00eatre appel\u00e9 depuis la classe\n  static readonly PI = 3.14;\n  // doit \u00eatre appel\u00e9 depuis la classe\n  static add(x: number, y: number): number {\n    return x + y;\n  }\n  // doit \u00eatre appel\u00e9 depuis une instance\n  multiply(x: number, y: number): number {\n    return x * y;\n  }\n}\n\nconsole.log(MathUtils.PI);\nconsole.log(MathUtils.add(2, 5));\n\nconst mu = new MathUtils();\nconsole.log(mu.multiply(2, 5));\n\n// erreur\n//console.log(MathUtils.multiply(2, 5));\n\n// On ne peut pas appeler du statique depuis un objet en TS\n// console.log(mu.PI);\n// console.log(mu.add(2, 5));\n</code></pre>"},{"location":"poo/caracteristiques/#polymorphisme","title":"Polymorphisme","text":"<ul> <li>Consiste \u00e0 donner des comportement diff\u00e9rents \u00e0 une m\u00e9thode selon la classe qui l'impl\u00e9mente et quand on appelle la m\u00e9thode depuis la classe m\u00e8re, on aura la m\u00e9thode de sa classe concr\u00e8te qui sera appel\u00e9e</li> </ul> Propri\u00e9t\u00e9s<pre><code>abstract class Shape {\n  abstract get area(): number;\n  showName() {\n    console.log(\"shape\");\n  }\n}\n\nabstract class TwoDimensionShape extends Shape {\n  // surchage (ou override) de showName\n  showName() {\n    console.log(\"TwoDimensionShape\");\n  }\n}\n\nclass Rectangle extends TwoDimensionShape {\n  constructor(readonly width: number, readonly height: number) {\n    super();\n  }\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  showName() {\n    console.log(\"Rectangle\");\n  }\n}\n\nclass Line extends Shape {\n  get area() {\n    return 0;\n  }\n\n  showName() {\n    console.log(\"Line\");\n  }\n}\n\nconst s: Shape = new Rectangle(10, 100);\nconsole.log(s.area);\ns.showName();\n\nconst shapes: Shape[] = [new Line(), new Rectangle(40, 80), new Line()];\n// Si TS n'\u00e9tait pas polymorphe\nfor (const shape of shapes) {\n  if (shape instanceof Line) {\n    // casting: changer le type\n    (shape as Line).showName();\n  } else if (shape instanceof Rectangle) {\n    (shape as Rectangle).showName();\n  }\n}\n\n// mais comme TS est polymorhpe\nfor (const shape of shapes) {\n  shape.showName();\n}\n</code></pre>"},{"location":"poo/caracteristiques/#exercices","title":"Exercices","text":""},{"location":"poo/caracteristiques/#exo-1","title":"Exo 1","text":"<p>Dans cet exercice, on manipule des formes g\u00e9om\u00e9triques que l'on d\u00e9finit par la classe abstraite <code>GeometricShape</code>. Cette derni\u00e8re d\u00e9clare deux m\u00e9thodes abstraites <code>computeArea()</code> qui renvoie un nombre et <code>computePerimeter()</code> qui retourne un nombre.</p> <ol> <li>D\u00e9finir les classes <code>Rectangle</code>, <code>Square</code> et <code>Circle</code> qui h\u00e9ritent de la classe <code>GeometricShape</code>.</li> <li>D\u00e9finir la classe <code>Drawing</code> (dessin en Anglais) qui contient une liste de formes g\u00e9om\u00e9triques.</li> <li>Cr\u00e9er un programme qui instancie deux dessins avec chacun des formes g\u00e9om\u00e9triques diff\u00e9rentes (4 formes environ par dessin).</li> </ol>"},{"location":"poo/caracteristiques/#exo-2","title":"Exo 2","text":"<p>Un fermier veut mod\u00e9liser ses animaux via leurs caract\u00e9ristiques. Certain animaux peuvent crier, d\u2019autres sont muets. On repr\u00e9sentera le fait de crier au moyen d\u2019une m\u00e9thode affichant \u00e0 l\u2019\u00e9cran le cri de l\u2019animal.</p> <ol> <li>Ecrire une interface <code>Shouter</code> (crieur en Anglais) contenant la m\u00e9thode permettant de crier qu'on appellera <code>shout()</code>.</li> <li>Ecrire les classes des chats <code>Cat</code>, des chiens <code>Dog</code> et des lapins <code>Rabbit</code> (qui sont muets)</li> <li>Ecrire un programme avec un tableau pour les animaux qui savent crier, le remplir avec 1 chiens et deux chats, puis faire crier tous ces animaux. D\u00e9crire ce qui s\u2019affiche \u00e0 l\u2019\u00e9cran \u00e0 l\u2019ex\u00e9cution de ce programme.</li> <li>L'\u00e9leveur donne un nom \u00e0 chacun de ses animaux. Cr\u00e9er la classe abstraite <code>Animal</code> avec la propri\u00e9t\u00e9 <code>name</code> qui est la classe m\u00e8re de tous les animaux.</li> <li>Cr\u00e9er une classe <code>Farmer</code> (fermier en Fran\u00e7ais) qui contient un tableau d'animaux pass\u00e9 dans le constructeur.</li> <li>Cr\u00e9er une instance de la classe <code>Farmer</code> en lui passant tableaux d'animaux contenant trois chiens, deux chats et trois lapins.</li> <li>Le fermier souhaite retrouver facilement ses animaux pas leurs caract\u00e9ristiques. Cr\u00e9er une m\u00e9thode <code>findShoutingAnimals()</code> qui retourne un tableau des animaux du fermier qui crient (astuce: utiliser <code>if (\"shout\" in animal)</code> pour savoir si un animal peut crier).<ul> <li>Pour info, <code>if (\"shout\" in animal)</code> n'est pas super propre mais c'est la m\u00e9thode la plus simple pour d\u00e9buter.</li> </ul> </li> <li>Le fermier souhaite passer par une propri\u00e9t\u00e9 calcul\u00e9e \u00e0 la place de la m\u00e9thode de la question pr\u00e9c\u00e9dente. Cr\u00e9er une propri\u00e9t\u00e9 calcul\u00e9e <code>get shoutingAnimals()</code> qui retourne le m\u00eame r\u00e9sultat que <code>findShoutingAnimals()</code>.</li> <li>Afficher le r\u00e9sultat de la m\u00e9thode <code>findShoutingAnimals()</code> et la valeur de la propri\u00e9t\u00e9 <code>get shoutingAnimals()</code>. Quelle syntaxe pr\u00e9f\u00e9rez-vous ?</li> <li>Le fermier \u00e9l\u00e8ve \u00e9galement un Canari (Canary en Anglais). Il souhaite en profiter pour mod\u00e9liser les caract\u00e9ristiques voler et marcher de ses animaux. D\u00e9finir la classe <code>Canary</code> ainsi que les interfaces <code>Walker</code> et <code>Flyer</code>. Mettre \u00e0 jour les classes existantes pour impl\u00e9menter les interfaces qui leurs correspondent.</li> <li>Cr\u00e9er une propri\u00e9t\u00e9 calcul\u00e9e <code>get FlyingAnimals()</code> qui retourne une liste d'animaux qui volent.</li> </ol>"},{"location":"poo/caracteristiques/#exo-3","title":"Exo 3","text":"<ol> <li>Cr\u00e9er une classe <code>Station</code> qui a deux champs en readonly: <code>id</code> de type number et <code>name</code> de type string.</li> <li>Le constructeur ne prend que <code>name</code> en argument et <code>id</code> est g\u00e9n\u00e9r\u00e9 via un compteur qui est incr\u00e9ment\u00e9 \u00e0 chaque nouvelle instance cr\u00e9\u00e9 (astuce, utiliser une propri\u00e9t\u00e9 statique)</li> <li>cr\u00e9er trois stations et v\u00e9rifier que leur id est bien positionn\u00e9.</li> <li>d\u00e9finir une m\u00e9thode <code>isEqualTo(s: Station)</code> qui retourne <code>true</code> si la station pass\u00e9e en argument \u00e0 le m\u00eame <code>id</code></li> <li>Faire quelques appels de <code>isEqualTo</code> sur diff\u00e9rentes stations.</li> </ol>"},{"location":"poo/caracteristiques/#exo-4","title":"Exo 4","text":"<p>Cr\u00e9er une classe StringUtils qui d\u00e9finit les m\u00e9thodes statiques suivantes:</p> <ol> <li><code>askQuestion(message: string): string</code>: qui retourne une nouvelle cha\u00eene de caract\u00e8res qui est une concat\u00e9nation un \"?\" \u00e0 <code>message</code></li> <li><code>countVowels(message: string): number</code> qui retourne le nombre de voyelles dans <code>message</code></li> <li><code>removeVowels(message: string): string</code> qui retourne une nouvelle cha\u00eene de caract\u00e8res qui est <code>message</code> d\u00e9pourvu de ses voyelles (en gardant l'ordre des lettres initiales)</li> </ol>"},{"location":"poo/caracteristiques/#sources","title":"Sources","text":"<ul> <li>cs108_21_final</li> <li>TD Programmation Orient\u00e9e Objet</li> <li>classe abstraite et interface</li> <li>Corrig\u00e9s des exercices sur les interfaces</li> </ul>"},{"location":"poo/classes_heritage/","title":"Classes et h\u00e9ritage","text":"<ul> <li>La poo permet de mod\u00e9liser les \u00e9l\u00e9ments qu'on veut traiter sous forme d'objets.</li> <li>Un objet contient des membres (propri\u00e9t\u00e9s et m\u00e9thodes).</li> <li>Un objet peut \u00eatre cr\u00e9\u00e9 (ou instanci\u00e9) de diff\u00e9rentes fa\u00e7ons:<ul> <li>Les techniques communes: \u00e0 partir d'une classe ou objets litt\u00e9raux.</li> <li>Techniques avanc\u00e9es: Singletons, monteurs (Builders), Injection de d\u00e9pendances.</li> </ul> </li> </ul> Python D\u00e9finition d'une classe<pre><code>class User:\n    \"\"\"CamelCase pour les noms de classes\"\"\"\n\n    def __init__(self):\n        \"\"\"initialiseur ou constructeur.\n        Son usage: Permet d'initialiser les propri\u00e9t\u00e9s\"\"\"\n        self.first_name = \"Naruto\"\n        self.last_name = \"Uzumaki\"\n        self.birth_year = 1800\n\n    def __str__(self) -&gt; str:\n        \"\"\"Repr\u00e9sentation textuelle. Utilis\u00e9e surtout pour l'affichage dans les print\"\"\"\n        return self.first_name + \" \" + self.last_name + \" \" + str(self.birth_year)\n\n    def launch_attack(self):\n        print(self.first_name, \"launches an attack\")\n\n\nu1 = User()\nu2 = User()\nu3 = User()\n\nprint(u1, u1.first_name, u1.last_name)\n\nu2.birth_year += 20\nu2.first_name = \"Boruto\"\nprint(u2, u2.first_name, u2.birth_year)\n\nu2.launch_attack()\n</code></pre>"},{"location":"poo/classes_heritage/#exercice","title":"Exercice","text":"<p>Dans le code donn\u00e9 plus haut, identifier avec des commentaires les parties qui effectuent les op\u00e9ration suivantes: instanciation d'objet, d\u00e9finition d'une classe, d\u00e9finition d'une propri\u00e9t\u00e9, d\u00e9finition d'une m\u00e9thode et appel d'une m\u00e9thode.</p> Solution <ul> <li>D\u00e9finition d'une classe: <code>class Monster {}</code></li> <li>Instanciation d'objet: <code>new Monster(\"Lapinou\", 100);</code> et <code>new Monster(\"Chatounet\", 0);</code></li> <li>D\u00e9finition de propri\u00e9t\u00e9s: <code>readonly name: string, readonly hp: number</code></li> <li>Appel d'une m\u00e9thode: <code>monster1.checkAlive();</code> et <code>monster2.checkAlive();</code></li> </ul>"},{"location":"poo/classes_heritage/#classes-et-heritage-simple","title":"Classes et h\u00e9ritage simple","text":"<ul> <li>Une classe d\u00e9finit l'ensemble des membres ses instances auront.</li> <li>Une classe peut \u00eatre d\u00e9finie:<ul> <li>A partir de z\u00e9ro,</li> <li>Ou \u00e0 partie d'une autre classe.  Cette technique s'appelle l'h\u00e9ritage simple,</li> <li>Ou \u00e0 partie de plusieurs classes.  Cette technique s'appelle l'h\u00e9ritage multiple.  Tr\u00e8s peu de langages proposent cette option.</li> </ul> </li> <li>Une classe peut aussi impl\u00e9menter des interfaces.</li> <li>Le constructeur est la premi\u00e8re fonction qui est appel\u00e9e lors de l'instanciation d'un objet.<ul> <li>Certains constructeurs permettent d'initialiser les propri\u00e9t\u00e9s avec peu de code.</li> </ul> </li> <li>Certains langages permettent de d\u00e9finir des modificateurs de visibilit\u00e9 pour ses membres.<ul> <li>Modificateurs de visibilit\u00e9 (non disponible en Python):<ul> <li><code>private</code>: membre utilisable uniquement par sa classe.</li> <li><code>protected</code>: membre utilisable uniquement par sa classe ou celles qui en h\u00e9ritent.</li> <li><code>public</code>: membres utilisables depuis n'import o\u00f9.</li> </ul> </li> <li>D'autres modificateur peuvent \u00eatre propos\u00e9s selon le langage:<ul> <li><code>abstract</code>: rend le membre abstrait</li> <li><code>readonly</code>: propri\u00e9t\u00e9 publique en lecture seule (comme un <code>const</code>)</li> </ul> </li> <li><code>static</code>: le membre existera tout le temps en un exemplaire accessible avec le nom de la classe</li> </ul> </li> </ul> D\u00e9finition de deux classes dont une qui h\u00e9rite de l'autre<pre><code>class Ship {\n  // En pr\u00e9fixant avec private, public ou protected, l'argument devient une propri\u00e9t\u00e9.\n  constructor(protected speed: number) {}\n  move() {\n    console.log(\"Moving at speed\", this.speed);\n  }\n\n  static staticValue = \"Hello !\";\n}\n\n// static members always exist\nconsole.log(Ship.staticValue);\n\nconst ship = new Ship(200);\nship.move();\n\nclass SpaceShip extends Ship {\n  constructor(speed: number, public staelliteCount: number) {\n    super(speed);\n  }\n}\n\nconst spaceShip = new SpaceShip(1000, 5);\nconsole.log(\"The space ship has \", spaceShip.staelliteCount, \" sattelites\");\n</code></pre>"},{"location":"poo/classes_heritage_exercices/","title":"Exercices: s\u00e9rie 1","text":""},{"location":"poo/classes_heritage_exercices/#classes","title":"Classes","text":""},{"location":"poo/classes_heritage_exercices/#exercice-1","title":"Exercice 1","text":"PythonTypeScript <p>D\u00e9finir une classe <code>Book</code> avec les propri\u00e9t\u00e9s suivantes Python: <code>nb_pages: number,</code>title<code>: string,</code>author<code>: string,</code>isbn<code>: string</code> (ISBN (The International Standard Book Number)) et <code>marked_page: number</code>.</p> <ul> <li>Dans la classe <code>Book</code>, d\u00e9finir une m\u00e9thode <code>mark_page(self, page)</code> qui permet de mettre \u00e0 jour la valeur de <code>marked_page</code> avec la valeur de l'argument <code>page</code>. \u26a0 bien v\u00e9rifier que <code>page</code> soit &lt; \u00e0 <code>nb_pages</code>.</li> <li>Cr\u00e9er une classe <code>Library</code> (Biblioth\u00e8que) qui contient un tableau de livres qui est pass\u00e9 au constructeur. \u26a0 Il y'a une relation entre <code>Library</code> et <code>Book</code> mais ce n'est pas une relation d'h\u00e9ritage. Pour ce cas, on dit que c'est une agr\u00e9gation.</li> <li>Dans la classe <code>Library</code>, d\u00e9finir une m\u00e9thode <code>list_authors()</code> qui retourne un tableau contenant uniquement les noms des auteurs.</li> <li>Dans la classe <code>Library</code>, d\u00e9finir une m\u00e9thode <code>sum_of_marked_pages()</code> qui retourne la somme des <code>marked_page</code> de tous les livres.</li> <li>Instancier une <code>Library</code> avec trois livres</li> <li>Afficher les r\u00e9sultats des appels des m\u00e9thodes <code>list_authors()</code> et <code>sum_of_marked_pages()</code>.</li> <li>Est-ce que la classe <code>Book</code> peuvent exister et \u00eatre utilis\u00e9e ind\u00e9pendamment de <code>Library</code> ?</li> </ul> <p>D\u00e9finir une classe <code>Book</code> avec les propri\u00e9t\u00e9s suivantes en <code>readonly</code>: <code>nbPages: number, author: string, isbn: string</code> (ISBN (The International Standard Book Number)) et en <code>protected</code>: <code>markedPage: number</code>.</p> <ul> <li>Dans la classe <code>Book</code>, d\u00e9finir une m\u00e9thode <code>markPage(page: number)</code> qui permet de mettre \u00e0 jour la valeur de <code>markedPage</code> avec la valeur de l'argument <code>page</code>. \u26a0 bien v\u00e9rifier que <code>page</code> soit &lt; \u00e0 <code>nbPages</code>.</li> <li>Cr\u00e9er une classe <code>Library</code> (Biblioth\u00e8que) qui contient un tableau de livres. \u26a0 Il une relation entre <code>Library</code> et <code>Book</code> mais ce n'est pas une relation d'h\u00e9ritage. Pour ce cas, on dit que c'est une agr\u00e9gation.</li> <li>Dans la classe <code>Library</code>, d\u00e9finir une m\u00e9thode <code>listAuthors()</code> qui retourne un tableau contenant uniquement les noms des auteurs.</li> <li>Dans la classe <code>Library</code>, d\u00e9finir une m\u00e9thode <code>sumOfMarkedPages()</code> qui retourne la somme des <code>markedPage</code> de tous les livres.</li> <li>Instancier une <code>Library</code> avec trois livres</li> <li>Afficher les r\u00e9sultats des appels des m\u00e9thodes <code>listAuthors()</code> et <code>sumOfMarkedPages()</code>.</li> <li>Est-ce que la classe <code>Book</code> peuvent exister et \u00eatre utilis\u00e9e ind\u00e9pendamment de <code>Library</code> ?</li> </ul> Solution en Python <pre><code>class Book:\n    def __init__(self, nb_pages, title, author, isbn) -&gt; None:\n        \"\"\" \" Constructeur: permet d'initialiser les propri\u00e9t\u00e9s\"\"\"\n        self.nb_pages = nb_pages\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n        self.marked_page = 0\n\n    def mark_page(self, page):\n        if 0 &lt;= page &lt; self.nb_pages:\n            self.marked_page = page\n        else:\n            print(f\"Impossible de marque la page {page}\")\n\n\nclass Library:\n    def __init__(self, books) -&gt; None:\n        self.books = books\n\n    def list_authors_method_1(self):\n        authors = []\n        for book in self.books:\n            authors.append(book.author)\n        return authors\n\n    def list_authors_method_2(self):\n        \"\"\"Utilisation de la 'compr\u00e9hension' de listes\"\"\"\n        return [book.author for book in self.books]\n\n    def sum_of_marked_pages_method_1(self):\n        sum = 0\n        for book in self.books:\n            sum += book.marked_page\n        return sum\n\n    def sum_of_marked_pages_method_2(self):\n        return sum([book.marked_page for book in self.books])\n\n\nbook1 = Book(\n    190,\n    \"Matt Weisfeld\",\n    \"Object-Oriented Thought Process, The (Developer's Library)\",\n    \"978-0135181966\",\n)\n\nbook2 = Book(230, \"Jon Bodner\", \"Learning Go\", \"978-1098139292\")\n\nbook1.mark_page(-1)\nbook1.mark_page(800)\nbook1.mark_page(3)\n\nbook2.mark_page(200)\n\nbooks = [\n    book1,\n    book2,\n    Book(300, \"Rob Mastrodomenico\", \"The Python Book\", \"978-1119573319\"),\n]\nbooks[-1].mark_page(33)\n\nlibrary = Library(books)\nprint(\"list of authors method 1\", library.list_authors_method_1())\nprint(\"list of authors method 2\", library.list_authors_method_2())\nprint(\n    \"sum of marked pages\",\n    library.sum_of_marked_pages_method_1(),\n    library.sum_of_marked_pages_method_2(),\n)\n</code></pre>"},{"location":"poo/classes_heritage_exercices/#exercice-2","title":"Exercice 2","text":"<p>On souhaite repr\u00e9senter des montres et les personnes qui les portent.</p> <p>Une montre donne l'heure et les minutes. On peut initialiser une montre soit \u00e0 partir d'un couple heure/minute donn\u00e9, soit par clonage (en cr\u00e9ant une nouvelle montre \u00e0 partir d'une montre existante). Il doit \u00eatre possible de faire avancer l'heure d'une montre en ajoutant une minute (attention, les minutes sont limit\u00e9es \u00e0 60 et les heures \u00e0 24).</p> <p>Une personne a un nom et peut \u00e9ventuellement porter une montre. Une personne peut porter une montre donn\u00e9e, si elle n'en a pas d\u00e9j\u00e0 une. Elle peut aussi enlever sa montre si elle en porte une. Une personne peut demander l'heure \u00e0 une autre personne, qui lui donne l'heure sous forme d'une cha\u00eene de caract\u00e8res, en consultant sa montre si elle en a une (sinon elle peut retourner une chaine vide).</p> <ol> <li>\u00c9crivez une classe qui repr\u00e9sente les montres telles que d\u00e9crites ci-dessus.</li> <li>Cr\u00e9er une montre affichant 13h45 et une autre montre qui est un clone de la premi\u00e8re.</li> <li>\u00c9crivez une classe qui repr\u00e9sente les personnes telles que d\u00e9crites ci-dessus.</li> <li>On veut faire en sorte que chaque montre ne soit port\u00e9e que par une seule personne. Proposer des ajouts/modifications des deux classes pr\u00e9c\u00e9dentes pour garantir cela.</li> <li>Dor\u00e9navant, une personne peut porter une montre qui peut \u00eatre m\u00e9canique ou num\u00e9rique.</li> </ol> Solution en TS <pre><code>class Watch {\n  constructor(private hour: number, private minute: number) {}\n\n  clone(): Watch {\n    return new Watch(this.hour, this.minute);\n  }\n\n  // Avant d'une minute\n  advance() {\n    this.minute += 1;\n    if (this.minute === 60) {\n      this.hour += 1;\n      this.minute = 0;\n      if (this.hour === 24) {\n        this.hour = 0;\n      }\n    }\n  }\n\n  getTimeString(): string {\n    return `${this.hour}:${this.minute}`;\n  }\n}\n\nclass Person {\n  constructor(readonly name: string, private watch: Watch | null) {}\n  // wear:  porter (pour les v\u00eatement)\n  wear(watch: Watch) {\n    if (this.watch === null) {\n      this.watch = watch;\n    }\n  }\n  remove() {\n    this.watch = null;\n  }\n  requestTime(person: Person): string {\n    if (person.watch !== null) {\n      return `${person.name}: il est ${person.watch.getTimeString()}`;\n    }\n    // else pas n\u00e9cessaire car de toute fa\u00e7on, le if fait un return\n    return \"\";\n  }\n}\n\nconst w = new Watch(10, 59);\nconst w2 = w.clone();\nw.advance();\nconsole.log(w, w2);\n\nconst tintin = new Person(\"Tintin\", null);\nconst dupond = new Person(\"Dupond\", w2);\n\nconsole.log(tintin);\ntintin.wear(w);\nconsole.log(tintin);\ntintin.remove();\nconsole.log(tintin);\n\nconst time = tintin.requestTime(dupond);\nconsole.log(time);\n</code></pre> Solution en Python <pre><code>class Watch:\n    def __init__(self, hour, minute, is_mechanical) -&gt; None:\n        self.hour = hour\n        self.minute = minute\n        self.is_mechanical = is_mechanical\n        self.is_worn = False\n\n    def __str__(self) -&gt; str:\n        return f\"Current time {self.hour}:{self.minute}\"\n\n    def add(self, minute):\n        self.minute += minute\n        while self.minute &gt;= 60:\n            self.minute -= 60\n            self.hour += 1\n            if self.hour &gt;= 24:\n                self.hour = 0\n\n\nclass Person:\n    def __init__(self, name) -&gt; None:\n        self.name = name\n        self.worn_watch = None\n\n    def wear_watch(self, watch):\n        if self.worn_watch == None and not watch.is_worn:\n            self.worn_watch = watch\n            watch.is_worn = True\n\n    def remove_watch(self):\n        if self.worn_watch != None:\n            self.worn_watch.is_worn = False\n            self.worn_watch = None\n\n\nantoine = Person(\"Antoine\")\ncyril = Person(\"Cyril\")\n\nwatch1 = Watch(12, 12, True)\nantoine.wear_watch(watch1)\n\nwatch2 = Watch(11, 10, True)\ncyril.wear_watch(watch1)\nprint(\"Montre port\u00e9e par Cyrtil ?\", cyril.worn_watch)\n\ncyril.wear_watch(watch2)\nprint(\"Montre port\u00e9e par Cyrtil ?\", cyril.worn_watch)\n\n\nwatch1.add(50)\nprint(\"after add 50\", watch1)\n\nwatch1.add(2000)\nprint(\"after add 2000\", watch1)\n</code></pre>"},{"location":"poo/classes_heritage_exercices/#exercice-3","title":"Exercice 3","text":"<p>On veut r\u00e9aliser un programme de gestion des recettes de cuisine. La classe <code>Ingredient</code> contient ces membres:</p> <ul> <li><code>name</code>, <code>state</code> et <code>unit</code> de type <code>string</code></li> <li><code>quantity</code> de type <code>number</code></li> <li>Le constructeur initialise les propri\u00e9t\u00e9s ci-dessus via 4 arguments qui lui seront pass\u00e9s.</li> </ul> <p>L'\u00e9tat d'un ingr\u00e9dient (son <code>state</code>) peut \u00eatre: <code>cooked</code> (cuit), <code>raw</code> (cru), <code>whole</code> (entier), ou <code>cut</code> (d\u00e9coup\u00e9) ou une combinaison de ces \u00e9tats (par exemple cuit et entier). L'unit\u00e9 peut \u00eatre une unit\u00e9 de poids (<code>g</code>, <code>kg</code>, etc), de volume (<code>l</code>, <code>ml</code>, <code>cl</code>) ou simplement une <code>cadrinality</code> (cardinalit\u00e9 ou nombre de pi\u00e8ces).</p> <p>La classe <code>Dish</code> (plat) repr\u00e9sente les plats, chaque plat ayant un nom et une liste d'ingr\u00e9dients. On doit pouvoir cr\u00e9\u00e9r un plat avec son nom.</p> <ol> <li>D\u00e9finir les classe <code>Ingredient</code> et <code>Dish</code></li> <li>Cr\u00e9er un plat appel\u00e9 choucroute contenant comme ingr\u00e9dients : 500g de choucroute cuite, 150g de lard cuit et entier et 2 saucisses enti\u00e8res et cuites</li> <li>On veut pouvoir comparer les plats et donc leurs ingr\u00e9dients. Ajoutez une m\u00e9thode <code>equals</code> dans la classe Ingr\u00e9dient qui renvoie true si deux ingr\u00e9dients ont le m\u00eame nom d'aliment et le m\u00eame \u00e9tat (pas forc\u00e9ment la m\u00eame quantit\u00e9).<ul> <li>Si vous faites l'exercice en Python, appeler plut\u00f4t cette m\u00e9thode <code>__eq__</code>. Comparer des plats avec le <code>==</code>. Que constatez vous ?</li> </ul> </li> <li>V\u00e9rifier l'\u00e9galit\u00e9 entre quelques ingr\u00e9dients</li> <li>Ajoutez une m\u00e9thode <code>equals</code> dans la classe <code>Dish</code> qui prend en argument un plat, qui renvoie true si deux plats contiennent les m\u00eames ingr\u00e9dients, au sens donn\u00e9 juste avant.<ul> <li>Si vous faites l'exercice en Python, appeler plut\u00f4t cette m\u00e9thode <code>__eq__</code>. Comparer des plats avec le <code>==</code>. Que constatez vous ?</li> </ul> </li> <li>V\u00e9rifier l'\u00e9galit\u00e9 entre quelques plats</li> </ol> Solution en Python <pre><code>class Ingredient:\n    def __init__(self, name, state, unit, quantity):\n        self.name = name\n        self.state = state\n        self.unit = unit\n        self.quantity = quantity\n\n    def equals(self, ingredient):\n        if self.name == ingredient.name and self.state == ingredient.state:\n            return True\n        return False\n\n    def __eq__(self, __value):\n        return self.equals(__value)\n\n\nclass Dish:\n    def __init__(self, name, ingredients):\n        self.name = name\n        self.ingredients = ingredients\n\n    def __eq__(self, __value) -&gt; bool:\n        if len(self.ingredients) != len(__value.ingredients):\n            return False\n        # On clone les ingr\u00e9dients pour qu'on puisse \u00e9liminer ceux qu'on retouve dans le premier plat\n        ingredients_to_compare = __value.ingredients[:]\n        for ingredient in self.ingredients:\n            for i in range(len(ingredients_to_compare)):\n                # D\u00e8s qu'on retrouve un ingr\u00e9dient dans les deux plats on l'enl\u00e8ve\n                if ingredients_to_compare[i] == ingredient:\n                    del ingredients_to_compare[i]\n                    break\n        # Si on a vid\u00e9 la liste, c\u00e0d que tous les ing\u00e9dients existents dans les deux plats\n        if len(ingredients_to_compare) == 0:\n            return True\n        return False\n\n\ningredient_choucroute1 = Ingredient(\"Choucroute\", \"cooked\", \"g\", 500)\ningredient_choucroute2 = Ingredient(\"Choucroute\", \"cooked\", \"kg\", 1)\nlard = Ingredient(\"Lard\", \"cooked\", \"g\", 150)\n\nprint(ingredient_choucroute1 == ingredient_choucroute2)\nprint(ingredient_choucroute1 == lard)\n\nchoucroute = Dish(\n    \"Choucroute\",\n    [\n        ingredient_choucroute1,\n        lard,\n        Ingredient(\"Saucisse enti\u00e8re\", \"cooked\", \"cadrinality\", 2),\n    ],\n)\n\nchoucroute_light = Dish(\n    \"Choucroute light\",\n    [ingredient_choucroute1],\n)\n\nchoucroute_double = Dish(\n    \"Choucroute\",\n    [\n        ingredient_choucroute2,\n        lard,\n        Ingredient(\"Saucisse enti\u00e8re\", \"cooked\", \"cadrinality\", 4),\n    ],\n)\n\nprint(choucroute_light == choucroute)\nprint(choucroute == choucroute_double)\n</code></pre>"},{"location":"poo/classes_heritage_exercices/#exercice-4","title":"Exercice 4","text":"<p>Un <code>Fisherman</code> (p\u00eacheur) a un nom,  plusieurs <code>FishingRod</code> (cannes \u00e0 p\u00eache). Chaque</p> <p>Mod\u00e9liser les classes <code>Fisherman</code></p>"},{"location":"poo/classes_heritage_exercices/#serie2-heritage-et-champs-statiques","title":"S\u00e9rie2: H\u00e9ritage et champs statiques","text":""},{"location":"poo/classes_heritage_exercices/#exercice-21","title":"Exercice 2.1","text":"<p>Cet exercice est la suite de l'exo3</p> <ol> <li>On veut faire la distinction entre les ingr\u00e9dients qu'on peut cuire et ceux qu'on peut d\u00e9couper. Un ingr\u00e9dient qu'on peut cuire doit avoir une m\u00e9thode <code>cook()</code> qui le fait passer dans l'\u00e9tat <code>cooked</code> et une temp\u00e9rature de cuisson. Un ingr\u00e9dient qu'on peut d\u00e9couper doit avoir une m\u00e9thode <code>cut()</code> qui le fait passer dans l'\u00e9tat <code>cut</code>.<ul> <li>En utilisant uniquement l'h\u00e9ritage, proposer une solution \u00e0 ce probl\u00e8me</li> <li>(\u26a0 \u00e0 ne pas faire en Python) En utilisant utilisant l'h\u00e9ritage et les interfaces, proposer une solution alternative \u00e0 ce probl\u00e8me</li> <li>(\u26a0 \u00e0 ne pas faire en Python) Laquelle des deux solutions vous semble la meilleure ?</li> </ul> </li> </ol>"},{"location":"poo/classes_heritage_exercices/#exercice-22","title":"Exercice 2.2","text":"<p>Important</p> <p>Cet exercice est purement th\u00e9orique. Aucun code n'est demand\u00e9.</p> <p>L'h\u00e9ritage est une relation est. Par exemple, dans un jeu vid\u00e9o, si on suppose qu'un <code>Human</code> est <code>Character</code> (personnage) et qu'un <code>Monster</code> (monstre) est aussi un <code>Character</code>, on \u00e9crira <code>Human extends Character</code> et <code>Monster extends Character</code>.</p> <ul> <li>Donner deux exemples de relation d'h\u00e9ritage.</li> <li>Trouver les relations d'h\u00e9ritage possibles:<ul> <li>\u00catre vivant, homme, animal</li> <li>Meuble, fauteuil, Armoire, Table, Jardin</li> <li>Aliment, P\u00e2tisserie, Mille-Feuilles, Croissant, Pain</li> </ul> </li> </ul>"},{"location":"poo/classes_heritage_exercices/#exercice-23","title":"Exercice 2.3","text":"<p>Essayer de mod\u00e9liser une classe parente commune (qu'on appelle aussi classe m\u00e8re) pour ces classes:</p> <ul> <li>Ordinateur portable, ordinateur fixe</li> <li>Ordinateur portable, ordinateur fixe, Switch, Xbox, Playstation</li> <li>Voiture, Camion, V\u00e9lo, Trottinette</li> </ul>"},{"location":"poo/classes_heritage_exercices/#exercice-24","title":"Exercice 2.4","text":"<p>D\u00e9finir la class <code>StringUtils</code> qui contient les m\u00e9thodes statiques suivantes:</p> <ul> <li><code>get_first(str)</code>: retourne le premier caract\u00e8re de la cha\u00eene pass\u00e9e en argument.</li> <li><code>get_last(str)</code>: retourne le dernier caract\u00e8re de la cha\u00eene pass\u00e9e en argument.</li> <li><code>get_substring(str, first, last)</code>: retourne la sous-cha\u00eene comprise entre les index first (inclus) et last (exclu).</li> </ul> <p>Ajoutes les propri\u00e9t\u00e9s statiques suivantes:</p> <ul> <li><code>new_line = \"\\n\"</code></li> <li><code>tab = \"\\t\"</code></li> </ul> <p>Utiliser les diff\u00e9rentes propri\u00e9t\u00e9s et appeler les diff\u00e9rentes m\u00e9thodes.</p> Solution en Python <pre><code>class StringUtils:\n\n    new_line = \"\\n\"\n    tab = \"\\t\"\n\n    @staticmethod\n    def get_first(input):\n        return input[0]\n\n    @staticmethod\n    def get_last(input):\n        return input[-1]\n\n    @staticmethod\n    def get_substring(input, first, last):\n        return input[first:last]\n\n\nprint(StringUtils.get_substring(\"python\", 2, 4))\nprint(f\"1{StringUtils.tab}2\")\n</code></pre>"},{"location":"poo/classes_heritage_exercices/#exercice-25","title":"Exercice 2.5","text":"<p>Nous souhaitons d\u00e9finir les classes d'un futur jeu MOBA qui va cartonner s\u00e9v\u00e8re. Le jeu sera en 2D en vue du dessus. Dans ce jeu nous aurons des h\u00e9ros qui affrontent des monstres.</p> <p>Les h\u00e9ros et les monstres ont tous des HP (points de vie), des MP (points de magie), un nom, une position dans la carte et une hitbox (rectangle de d\u00e9tection des d\u00e9g\u00e2ts).</p> <p>Un h\u00e9ro peut \u00eatre soit un tank, soit un mage, soit un soigneur ou soit un guerrier. Chaque h\u00e9ro a un niveau et une comp\u00e9tence propre (le h\u00e9ros fait 10 d\u00e9g\u00e2ts, le mage fait 20 d\u00e9g\u00e2ts et perd 5 mp, le tank donne 2 de ses hp et le soigneur fait gagner 30 hp et perd 8 mp). Tous les h\u00e9ros commencent au niveau 1 avec un valeur de HP et MP al\u00e9atoires compris entre 100 et 200 et entre 50 et 100 respectivement. Les guerriers commencent avec 0 MP.</p> <p>Un monstre peut \u00eatre soit un minion, soit un buldozer. Les monstres ont 0 MP et ont des hp al\u00e9atoires compris entre 30 et 70.</p> <p>Nous souhaitons compter le nombre d'instances de chaque h\u00e9ro cr\u00e9\u00e9 et le nombre d'instances de chaque monstre cr\u00e9\u00e9 depuis le d\u00e9but du programme.</p> <p>D\u00e9finir les diff\u00e9rentes classes.</p> Corrig\u00e9 <p></p> <pre><code>import random\n\n\nclass Point:\n    def __init__(self, x, y) -&gt; None:\n        self.x = x\n        self.y = y\n\n\nclass Rectangle:\n    def __init__(self, p: Point, width: int, height: int) -&gt; None:\n        self.p = p\n        self.width = width\n        self.height = height\n\n\nclass Character:\n    def __init__(self, name, hp, mp, position: Point, hitbox: Rectangle) -&gt; None:\n        self.name = name\n        self.hp = hp\n        self.mp = mp\n        self.position = position\n        self.hitbox = hitbox\n\n    def __str__(self) -&gt; str:\n        \"\"\" \" __nom__ -&gt; dunder (jargon python)\"\"\"\n        return (\n            f\"{self.__class__.__name__} (name={self.name}, hp={self.hp}, mp={self.mp})\"\n        )\n\n    def __repr__(self):\n        \"\"\"print d'une liste appelle cette m\u00e9thode au lieu de __str__\"\"\"\n        return self.__str__()\n\n\nclass Hero(Character):\n    def __init__(self, name, position, hitbox) -&gt; None:\n        hp = random.randint(100, 200)\n        mp = random.randint(50, 100)\n        super().__init__(name, hp, mp, position, hitbox)\n        self.level = 1\n\n    def attack(self, monster):\n        monster.hp -= 2\n        print(self, \"inflige 2 de d\u00e9g\u00e2ts. Nouvel \u00e9tat du monstre\", monster)\n\n    def perform_skill(self, character):\n        print(\n            self,\n            \"a appliqu\u00e9 une comp\u00e9tence a un personnage dont le nouvel \u00e9tat est:\",\n            character,\n        )\n\n\nclass Warrior(Hero):\n    def __init__(self, name, position, hitbox) -&gt; None:\n        super().__init__(name, position, hitbox)\n        self.mp = 0\n\n    def perform_skill(self, character):\n        character.hp = max(character.hp - 10, 0)\n        super().perform_skill(self, character)\n\n\nclass Mage(Hero):\n    def perform_skill(self, character):\n        if self.mp &lt; 5:\n            return\n        character.hp = max(character.hp - 20, 0)\n        self.mp -= 5\n        super().perform_skill(character)\n\n\nclass Tank(Hero):\n    def perform_skill(self, character):\n        if self.hp &lt; 2:\n            return\n        character.hp += 2\n        self.hp -= 2\n        super().perform_skill(character)\n\n\nclass Healer(Hero):\n    def perform_skill(self, character):\n        if self.mp &lt; 8:\n            return\n        character.hp += 30\n        self.mp -= 8\n        super().perform_skill(character)\n\n\nclass Monster(Character):\n    def __init__(self, name, position, hitbox) -&gt; None:\n        hp = random.randint(30, 70)\n        super().__init__(name, hp, 0, position, hitbox)\n\n    def attack(self, hero):\n        hero.hp -= 1\n        print(self, \"inflige 1 de d\u00e9g\u00e2t. Nouvel \u00e9tat du h\u00e9ro\", hero)\n\n\nclass Minion(Monster):\n    pass\n\n\nclass Buldozer(Monster):\n    pass\n\n\nmage = Mage(\n    \"Ryze\",\n    Point(10, 10),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nwarrior = Warrior(\n    \"Gerran\",\n    Point(50, 100),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nhealer = Healer(\n    \"Sorakan\",\n    Point(50, 50),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\ntanky = Tank(\n    \"tanky\",\n    Point(70, 50),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nminion1 = Minion(\n    \"m1\",\n    Point(200, 500),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nminion2 = Minion(\n    \"m2\",\n    Point(200, 500),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nb1 = Buldozer(\n    \"b1\",\n    Point(200, 500),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nheroes = [mage, healer, warrior, tanky]\nmonsters = [minion1, minion2, b1]\n\nprint(\"h\u00e9ros\", heroes)\nprint(\"monstres\", monsters)\n\nwarrior.attack(b1)\nmage.perform_skill(minion1)\nhealer.perform_skill(mage)\n</code></pre>"},{"location":"poo/classes_heritage_exercices/#exercice-26","title":"Exercice 2.6","text":"<p>Une \u00e9cole propose des formations des cours \u00e0 des \u00e9tudiants. Les cours sont assur\u00e9s par des intervenants. Chaque \u00e9tudiant ou intervenants a un num\u00e9ro de s\u00e9curit\u00e9 sociale qui est de type <code>string</code>, un nom, un pr\u00e9nom. Chaque cours est identifi\u00e9 par son nom et l'enseignant qui l'assure. Chaque \u00e9tudiant a une liste de cours qu'il suit durant l'ann\u00e9e.</p> <p>D\u00e9velopper un script python qui d\u00e9finit un enseignant en \"informatique\" et deux enseignants en \"maths\". Vous pouvez valoriser les autres propri\u00e9t\u00e9s \u00e0 votre guise, tant qu'elles sont valides.</p> <p>A l'aide de la fonction <code>input</code>, faire en sorte que votre script permette de cr\u00e9er un profil \u00e9tudiant qui peut choisir deux cours (un cours d'info et un de math ou deux de maths). L'\u00e9tudiant doit saisir toutes ses informations.</p>"},{"location":"poo/classes_heritage_exercices/#exercice-27","title":"Exercice 2.7","text":"<ul> <li>On souhaite mod\u00e9liser une collection de consoles et jeux r\u00e9tro. Les consoles et les jeux r\u00e9tro sont des appareil de divertissement les propri\u00e9t\u00e9s: <code>name</code>, <code>releaseYear</code> en commun. Les consoles ont en plus la propri\u00e9t\u00e9: <code>companyName</code> (la soci\u00e9t\u00e9 qui l'a cr\u00e9\u00e9). Les jeux vid\u00e9os ont comme propri\u00e9t\u00e9 suppl\u00e9mentaire: l'\u00e9diteur du jeu (celui qui le distribue) ainsi que son d\u00e9veloppeur. On aimerait aussi savoir s'il est ind\u00e9pendant ou pas.</li> <li>D\u00e9finir les classes n\u00e9cessaires.</li> <li>Chaque jeu vid\u00e9o tient une liste des consoles compatibles (pour les jeux cross-platform) via la propri\u00e9t\u00e9: <code>platforms</code>.</li> <li><code>VideoGameConsole</code> contient en plus la propri\u00e9t\u00e9: <code>companyName</code> de type string.</li> <li>Compl\u00e9ter la d\u00e9finition des classes et instancier quelques jeux et consoles.</li> </ul>"},{"location":"poo/classes_heritage_exercices/#sources-et-references","title":"Sources et r\u00e9f\u00e9rences","text":"<ul> <li>Exercices de Programmation Orient\u00e9e Objet en Java - MIS</li> </ul>"},{"location":"poo/exos/","title":"Exercices et compl\u00e9ments","text":""},{"location":"poo/exos/#exercices","title":"Exercices","text":""},{"location":"poo/exos/#exo-1","title":"Exo 1","text":"<ul> <li>On souhaite mod\u00e9liser un collection de consoles et jeux r\u00e9tro en utilisant les techniques de programmation orient\u00e9e objet.<ul> <li>D\u00e9finir les classes <code>VideoGame</code> et <code>VideoGameConsole</code>.</li> <li>Chaque classe propose les propri\u00e9t\u00e9s: <code>name</code>, <code>releaseYear</code>.</li> <li><code>VideoGame</code> contient en plus une liste des consoles compatibles (pour les jeux cross-platform) via la propri\u00e9t\u00e9: <code>platforms</code>.</li> <li><code>VideoGameConsole</code> contient en plus la propri\u00e9t\u00e9: <code>companyName</code> de type string.</li> <li>(\u26a0 \u00e0 ne pas faire en Python) D\u00e9finir toutes les propri\u00e9t\u00e9s en <code>readonly</code> dans le constructeur.<ul> <li>Quel est int\u00e9r\u00eat du qualificateur <code>readonly</code> ?</li> <li>En TypeScript, est-ce que les propri\u00e9t\u00e9s sont publiques ou priv\u00e9es par d\u00e9faut ? Est-ce le cas pour tous les langages ?</li> </ul> </li> </ul> </li> <li>On suppose que le collectionneur a une seule console du m\u00eame mod\u00e8le. C'est \u00e0 dire qu'on peut avoir une instance statique (ou unique, ou globale) pour chaque console.<ul> <li>Cr\u00e9er une ServiceLocator qui permet de r\u00e9cup\u00e9rer une instance unique de ces consoles avec les <code>name</code> et <code>companyName</code>:<ul> <li><code>DegaDrive</code>, <code>Dega</code>.</li> <li><code>Satourne</code>, <code>Dega</code>.</li> <li><code>Super Nontendo</code>, <code>Nontendo</code>.</li> <li><code>Nontendo</code>, <code>Nontendo</code>.</li> <li>Le choix du <code>releaseYear</code> est libre.</li> </ul> </li> </ul> </li> <li>Cr\u00e9er une factory <code>createDegaDriveVideoGame</code> pour cr\u00e9er des jeux dont la <code>platform</code> est \"DegaDrive\". Faire la m\u00eame chose pour \"Super Nontendo\"</li> <li>Cr\u00e9er une factory <code>createCrossPlatformVideoGame</code> pour cr\u00e9er des jeux dont les plateformes sont <code>DegaDrive</code>, <code>Satourne</code>, <code>Super Nontendo</code>, <code>Nontendo</code>.</li> <li>Cr\u00e9er une liste <code>retroGames</code> qui contient 1 jeu pour \"DegaDrive\", un jeu pour \"Super Nontendo\" et un jeu cross-platform. Le choix du <code>name</code>, <code>releaseYear</code> est libre pour chaque jeu.</li> </ul> Solution <p>`ts class VideoGame {   constructor(     readonly name: string,     readonly releaseYear: number,     readonly platforms: readonly VideoGameConsole[]   ) {}</p> <p>toString() {     return JSON.stringify(this, null, 4);   } }</p> <p>class VideoGameConsole {   constructor(     readonly name: string,     readonly releaseYear: number,     readonly companyName: string   ) {}</p> <p>toString() {     return JSON.stringify(this, null, 4);   } }</p> <p>class VideoGameServiceLocator {   readonly degaDrive = new VideoGameConsole(\"DegaDrive\", 1920, \"Dega\");   readonly satourne = new VideoGameConsole(\"Satourne\", 1950, \"Dega\");   readonly nontendo = new VideoGameConsole(\"Nontendo\", 1900, \"Nontendo\");   readonly superNontendo = new VideoGameConsole(     \"Super Nontendo\",     1930,     \"Nontendo\"   );</p> <p>private constructor() {}</p> <p>private static readonly _instance = new VideoGameServiceLocator();</p> <p>static get instance(): VideoGameServiceLocator {     return this._instance;   } }</p> <p>function createDegaDriveVideoGame(   name: string,   releaseYear: number ): VideoGame {   return new VideoGame(name, releaseYear, [     VideoGameServiceLocator.instance.degaDrive,   ]); }</p> <p>function createSuperNontendoVideoGame(   name: string,   releaseYear: number ): VideoGame {   return new VideoGame(name, releaseYear, [     VideoGameServiceLocator.instance.superNontendo,   ]); }</p> <p>function createCrossPlatformVideoGame(   name: string,   releaseYear: number ): VideoGame {   return new VideoGame(name, releaseYear, [     VideoGameServiceLocator.instance.degaDrive,     VideoGameServiceLocator.instance.satourne,     VideoGameServiceLocator.instance.superNontendo,     VideoGameServiceLocator.instance.nontendo,   ]); }</p> <p>const retroGames = [   createDegaDriveVideoGame(\"Super hydlike\", 1931),   createSuperNontendoVideoGame(\"Final Fiction\", 1940),   createCrossPlatformVideoGame(\"International Football\", 1920), ];</p> <p>console.table(retroGames);</p> <p>console.log(retroGames.toString()); `</p>"},{"location":"poo/exos/#exo-2","title":"Exo 2","text":"<ul> <li>Cr\u00e9ez une classe <code>Point</code> qui poss\u00e8de deux propri\u00e9t\u00e9s x et y de type <code>number</code> correspondant aux coordonn\u00e9es du point.</li> <li>Ajoutez une m\u00e9thode print() qui affiche les coordonn\u00e9es du point de cette fa\u00e7on (ici, x = 2 et y = 3): <code>Point | x : 2 | y : 3</code></li> <li>Ajoutez une m\u00e9thode <code>translate(tx,ty)</code> qui ajoute <code>tx</code> \u00e0 <code>x</code> et <code>ty</code> \u00e0 <code>y</code>.</li> </ul>"},{"location":"poo/exos/#exo-3","title":"Exo 3","text":"<ul> <li>Cr\u00e9ez une classe <code>BankAccount</code> mod\u00e9lisant un compte en banque.</li> <li>La classe poss\u00e8de deux propri\u00e9t\u00e9s initialis\u00e9es dans le constructeur.<ul> <li><code>balance</code> correspond au solde du compte</li> <li><code>managementCost</code> qui correspond au frais de gestion du compte.</li> </ul> </li> <li>Ajoutez une m\u00e9thode <code>print()</code> qui affiche les information du compte de cette fa\u00e7on: <code>Compte ( solde: 1000\u20ac | frais de gestion: 13\u20ac )</code></li> <li>Ajoutez une m\u00e9thode <code>debit(amount: number)</code> qui enl\u00e8ve <code>amount</code> au solde du compte uniquement si le solde est suffisant. Elle retourne un bool\u00e9en qui renvoie <code>true</code> si le d\u00e9bit a r\u00e9ussi, sinon <code>false</code>.</li> <li>Ajouter une m\u00e9thode <code>send(bankAccount: BankAccount, amount: number)</code> qui transf\u00e8re de l'argent vers un autre compte uniquement si le solde est suffisant. La m\u00e9thode retourne un bool\u00e9en calcul\u00e9 de la m\u00eame fa\u00e7on que la m\u00e9thode <code>debit</code>.</li> </ul>"},{"location":"poo/exos/#sources","title":"Sources","text":"<ul> <li>Exercices sur la programmation orient\u00e9e objet</li> </ul>"},{"location":"poo/exos/#aller-plus-loin","title":"Aller plus loin","text":"<ul> <li>Patrons de conception de refactoring.guru</li> <li>What is the difference between Builder Design pattern and Factory Design pattern?</li> <li>howtodoinjava.com</li> <li>TypeScript Getters and Setters from typescripttutorial.net</li> </ul>"},{"location":"poo/patrons/","title":"Quelques patrons de conception","text":""},{"location":"poo/patrons/#singleton-et-service-locator","title":"Singleton et service locator","text":"<ul> <li>La technique du singleton permet de manipuler une instance unique</li> <li>Elle peut \u00eatre mise en place via une propri\u00e9t\u00e9 ou m\u00e9thode statique d'une classe qui retourne la m\u00eame instance de cette classe</li> <li> Le constructeur d'une classe singleton est priv\u00e9, pour interdire l'instanciation depuis du code externe</li> <li>Il est aussi possible de centraliser les singletons dans une seule classe qu'on appelle service locator</li> <li>Le service locator est pr\u00e9f\u00e9r\u00e9 car il permet de centraliser la gestion des instances et peut apporter des fonctionnalit\u00e9s communes</li> </ul> Propri\u00e9t\u00e9s<pre><code>class Mage {\n  private constructor(public name: string, public hp: number) {}\n\n  static readonly instance = new Mage(\"\", 0);\n}\n\nMage.instance.hp = 200;\nconsole.log(Mage.instance.hp);\n\nclass Thief {\n  constructor(public name: string, public hp: number) {}\n}\n\nclass ServiceLocator {\n  static get mage(): Mage {\n    return Mage.instance;\n  }\n\n  static readonly thief = new Thief(\"Picflouz\", 100);\n}\n\nconsole.log(ServiceLocator.mage);\nconsole.log(ServiceLocator.thief);\n</code></pre>"},{"location":"poo/patrons/#fabrique-factory-et-monteur-builder","title":"Fabrique (Factory) et Monteur (Builder)","text":"<ul> <li>Une fabrique est une fonction qui g\u00e9n\u00e8re des instances d'une classe via une fonction.</li> <li>Un monteur est similaire \u00e0 la fabrique avec la diff\u00e9rence que les param\u00e8tres sont initialis\u00e9s sous forme d'une s\u00e9rie d'appels.<ul> <li> La technique du cha\u00eenage d'appels est souvent utilis\u00e9e en compl\u00e9ment.</li> </ul> </li> <li>Ces techniques permettent de substituer l'impl\u00e9mentation sans avoir \u00e0 changer le code qui demande une instance.</li> <li>Elle permettent aussi de proposer une syntaxe plus concise pour cr\u00e9er des objets complexes.</li> </ul> Fabrique et monteur<pre><code>interface Transporter {\n  readonly capacity: number;\n}\n\nclass SpaceShip implements Transporter {\n  constructor(\n    readonly speed: number,\n    readonly staelliteCount: number,\n    readonly capacity: number,\n    readonly shootPower: number\n  ) {}\n}\n\nclass Bus implements Transporter {\n  constructor(readonly capacity: number) {}\n}\n\n// Fabrique (ou Factory)\nfunction createTransporter(capacity: number): Transporter {\n  return new Bus(capacity);\n  //return new SpaceShip(10, 1, 4, 2200);\n}\n\nconst transporter = createTransporter(2);\nconsole.log(transporter);\n\n// Monteur (ou Builder)\nclass TransporterBuilder {\n  private capacity = 0;\n  constructor() {}\n  setCapacity(capacity: number) {\n    this.capacity = capacity;\n    // retourner this permet d'autoriser le chainage\n    return this;\n  }\n\n  build(): Transporter {\n    return new Bus(this.capacity);\n  }\n}\n\nconst transporter2 = new TransporterBuilder().setCapacity(5).build();\nconsole.log(transporter2);\n</code></pre>"},{"location":"poo/patrons/#exercices","title":"Exercices","text":""},{"location":"poo/patrons/#exo-1","title":"Exo 1","text":"<p>On souhaite mod\u00e9liser un garage qui r\u00e9pare des v\u00e9hicules. Un v\u00e9hicule est identifi\u00e9 par son matricule et a un \u00e9tat <code>isBroken</code> de type bool\u00e9en.</p> <p>Il n'y qu'une instance de garage possible. Le garage est identifi\u00e9 par son nom et permet de r\u00e9parer un v\u00e9hicule en basculant l'\u00e9tat <code>isBroken</code> \u00e0 <code>false</code>. Un v\u00e9hicule r\u00e9par\u00e9 reste en garage tant que son propri\u00e9taire n'e l'a pas r\u00e9cup\u00e9r\u00e9. Si un v\u00e9hicule n'est pas en panne, il est imm\u00e9diatement remis \u00e0 son propri\u00e9taire.</p> <p>Un propri\u00e9taire est identifi\u00e9 par son nom et la listes des v\u00e9hicules qu'il poss\u00e8de. Le propri\u00e9taire ne peut pas r\u00e9cup\u00e9rer un v\u00e9hicule qu'il ne poss\u00e8de pas.</p>"},{"location":"poo/patrons/#exo-2","title":"Exo 2","text":"<p>Faire l'exercice 5.2 ce cette s\u00e9rie avec les diff\u00e9rences suivants:</p> <ul> <li>Utiliser TypeScript au lieu de Java</li> <li>D\u00e9finir des factory (monteurs) pour instancier les diff\u00e9rents enseignants (<code>createResearcherLecturer()</code>, etc.)</li> </ul>"},{"location":"poo/projet/","title":"Mini projet","text":""},{"location":"poo/projet/#enonce","title":"Enonc\u00e9","text":"<p>D\u00e9velopper une application de type CRUD (Create, Read, Update, Delete) qui permet de manipuler une collection de donn\u00e9es en utilisant les concepts POO vus en cours. Voir la section suivante pour plus de d\u00e9tails.</p> <p>Le th\u00e8me est laiss\u00e9 \u00e0 votre choix (par exemple: tchat, e-commerce, etc.).</p> <p>Au niveau de l'interaction avec l'utilisateur, vous \u00eates libres du choix (interface graphique, application console, etc.). L'interface ne sera pas not\u00e9e donc une application console suffit.</p>"},{"location":"poo/projet/#elements-requis","title":"El\u00e9ments requis","text":"<ul> <li>D\u00e9finir trois classes qui h\u00e9ritent d'une classe m\u00e8re abstraite. (1)</li> <li>Cr\u00e9er une liste de dont les \u00e9l\u00e9ments ont le type de la classe abstraite. (1)</li> <li>Impl\u00e9menter des fonctions de filtrage par type de classe enfant. (2)</li> <li>D\u00e9finir au moins deux m\u00e9thodes. (1)</li> <li>D\u00e9finir au moins deux propri\u00e9t\u00e9s calcul\u00e9es, une avec un getter et l'autre avec un setter. (2)</li> <li>Faire un CRUD sur cette liste (2)</li> <li>Red\u00e9finir (override) une de vos m\u00e9thodes. (1)</li> <li>D\u00e9finir une m\u00e9thode statique. (1)</li> <li>D\u00e9finir un singleton et cr\u00e9er une factory. (2)</li> <li>Dans la classe m\u00e8re abstraite, d\u00e9finir une m\u00e9thode abstraite. (1)</li> <li>D\u00e9finir deux interfaces et faire en sorte que les classes impl\u00e9mentent l'une ou l'autre. (2)</li> <li>R\u00e9aliser le diagramme UML (2)</li> <li>Proposer des choses suppl\u00e9mentaires li\u00e9es \u00e0 la POO (2)</li> </ul>"},{"location":"poo/uml/","title":"Les diagrammes de classe","text":"<p>La phase de conception permet de se pr\u00e9parer au mieux au d\u00e9veloppement. Parmi les t\u00e2ches de cette phase est la d\u00e9finition des diff\u00e9rents algorithmes, l'identification des donn\u00e9es n\u00e9cessaires au bon fonctionnement du projet, etc. Dans ce chapitre, nous allons \u00e9tudier un aspect important de la conception en POO: les diagrammes de classe.</p> <p>Un diagramme de classe est tout dessin qui permet de repr\u00e9senter: les classes, les interfaces ainsi que leurs relations (h\u00e9ritage, impl\u00e9mentation, composition, agr\u00e9gation). Il existe plusieurs fa\u00e7ons de dessiner un diagramme, un des standard les plus connus sont les diagrammes de classe UML.</p>"},{"location":"poo/uml/#rappel-des-relations","title":"Rappel des relations","text":"<ul> <li>H\u00e9ritage: relation \"est un\"</li> <li>Impl\u00e9mentation: nom de l'h\u00e9ritage pour les interfaces</li> <li>Composition: A a une ou plusieurs instances de B et B est d\u00e9truit si A est d\u00e9truit (en d'autres termes B d\u00e9pend A). Exemple: les chambres d'une maison.</li> <li>Agr\u00e9gation: A a une ou plusieurs instances de B et B n'est pas forc\u00e9ment d\u00e9truit si A est d\u00e9truit (en d'autres termes B ne d\u00e9pend pas de A). Exemple: le moteur d'une voiture.</li> <li>Association:<ul> <li>Association unidirectionnelle: A peut appeler les m\u00e9thodes et propri\u00e9t\u00e9s de B mais pas l'inverse</li> <li>Association bidirectionnelle: A peut appeler les m\u00e9thodes et propri\u00e9t\u00e9s de B et inversement</li> <li>Association avec soi-m\u00eame: A peut appeler les m\u00e9thodes et propri\u00e9t\u00e9s de d'une autre instance de A</li> </ul> </li> </ul>"},{"location":"poo/uml/#les-diagrammes-de-classe-uml","title":"Les diagrammes de classe UML","text":"<p>UML est une norme qui d\u00e9finit comment repr\u00e9senter diff\u00e9rents types de diagrammes. Parmi ces diff\u00e9rents types de diagrammes, on trouve les diagrammes de classe. Cet aide-m\u00e9moire permet de voir les grandes lignes.</p>"},{"location":"poo/uml/#exemple-1","title":"Exemple 1","text":""},{"location":"poo/uml/#exemple-2","title":"Exemple 2","text":"<p>Ce diagramme permet d'obtenir le code suivant:</p> Code correspondant au diagramme de classe diagramme UML <pre><code>    import datetime\n\n\n    class LivingBeing:\n        def __init__(self, name, birth_date) -&gt; None:\n            self.name = name\n            self.birth_date = birth_date\n\n\n    class Brain:\n        def __init__(self, volume) -&gt; None:\n            self.volume = volume\n\n\n    class Hand:\n        def __init__(self, finger_count) -&gt; None:\n            self.finger_count = finger_count\n\n        def do_thumbs_up(self):\n            print(\"\ud83d\udc4d\")\n\n\n    class Heart:\n        pass\n\n\n    class Human(LivingBeing):\n        def __init__(\n            self, name, birth_date, social_security_number, height, heart, brain_volume\n        ) -&gt; None:\n            super().__init__(name, birth_date)\n            self.social_security_number = social_security_number\n            self.height = height\n            # Composition\n            self.brain = Brain(brain_volume)\n            self.hands = [Hand(3), Hand(12)]\n            # Agr\u00e9gation\n            self.heart = heart\n            self.hp = 10\n\n        def walk(self, distance):\n            print(f\"\ud83d\udeb6 during {distance} KM\")\n\n        def sleep(self, duration):\n            print(f\"It's time to \ud83d\ude34 for {duration} minutes\")\n\n        def talk(self, sentence):\n            print(f\"\ud83d\udde3\ufe0f: {sentence}\")\n\n        def eat(self, fruit):\n            print(f\"miam la pomme {fruit}\")\n            fruit.weight = 1\n            self.hp += 10\n\n        def heal(self, human):\n            print(f\"Soin appliqu\u00e9 \u00e0 {human}\")\n            human.hp += 3\n\n        def __str__(self) -&gt; str:\n            return f\"Human: hp -&gt; {self.hp}\"\n\n\n    class Fruit:\n        def __init__(self) -&gt; None:\n            self.weight = 10\n\n        def __str__(self) -&gt; str:\n            return f\"Fruit: weight -&gt; {self.weight}\"\n\n\n    heart = Heart()\n    human1 = Human(\"R\u00e9mie\", datetime.datetime(2003, 8, 15), 1_987_687_686, 175, heart, 2)\n\n    print(\"brain volume\", human1.brain.volume, \"M3\")\n    human1.sleep(10)\n    human1.walk(2000)\n    human1.talk(\"hahaha\")\n\n    a1 = Fruit()\n    a2 = Fruit()\n\n    human1.eat(a1)\n    human1.eat(a2)\n\n    h2 = Human(\"Dupont\", datetime.datetime(2000, 8, 15), 100, 175, Heart(), 2)\n    human1.heal(h2)\n\n    print(human1, h2)\n</code></pre>"},{"location":"poo/uml/#exercices","title":"Exercices","text":"<p>Pour dessiner les diagrammes UML, vous pouvez-utiliser diagrams.net ou cette extension VSCode.</p>"},{"location":"poo/uml/#exercice-1","title":"Exercice 1","text":"<p>Dessiner le diagramme de classes UML pour chacun groupe de classes (1 diagramme par cas):</p> <ul> <li>Meuble, Armoire, Table, Jardin, Chambre, Maison</li> <li>P\u00e2tisserie, Mille-Feuilles, Pain, Farine, Sel, Sucre</li> <li>V\u00e9hicule, Voiture, Camion, V\u00e9lo, Roue, Moteur, Volant</li> <li>Voiture, Berline, SUV, Roue, Moteur, Personne, Commercial, M\u00e9canicien, GarageAutomobile</li> </ul> <p>Coder en python un des cas.</p>"},{"location":"poo/uml/#solution-du-dernier-cas","title":"Solution du dernier cas","text":"Solution en Python <pre><code>class Roue:\n    pass\n\n\nclass Moteur:\n    pass\n\n\nclass Voiture:\n    def __init__(self, roues, moteur) -&gt; None:\n        if len(roues) &lt; 3 or len(roues) &gt; 5:\n            raise Exception(\n                \"Pass assez de roues\" if len(roues) &lt; 3 else \"Trop de roues\"\n            )\n        self.roues = roues\n        self.moteur = moteur\n\n\nclass Suv(Voiture):\n    pass\n\n\nclass Berline(Voiture):\n    pass\n\n\nclass Personne:\n    pass\n\n\nclass M\u00e9canicien(Personne):\n    pass\n\n\nclass Commercial(Personne):\n    pass\n\n\nclass GarageAutomobile:\n    def __init__(self, voitures, personnes) -&gt; None:\n        if len(personnes) == 0:\n            raise Exception(\"Il faut au moins une personne\")\n        self.personnes = personnes\n        self.voitures = voitures\n\n\npersonnes = [M\u00e9canicien(), Commercial(), M\u00e9canicien()]\nroues1 = [Roue()] * 5\nroues2 = [Roue()] * 3\nmoteur = Moteur()\nvoitures = [Berline(roues1, Moteur()), Suv(roues2, moteur)]\n\ntry:\n    Berline([Roue()], Moteur())\nexcept:\n    print(\"N'a pas pu cr\u00e9er la Berline\")\n\ngarage = GarageAutomobile(voitures, personnes)\n# GarageAutomobile([], [])\n\nprint(len(garage.personnes))\nprint(len(garage.voitures))\n</code></pre>"},{"location":"poo/uml/#exercice-2","title":"Exercice 2","text":"<p>Soit le diagramme UML suivant:</p> <p></p> <p>Apporter les modifications suivantes au diagramme:</p> <ul> <li>L'\u00eatre humain a un corps. Tout corps a un cerveau, des mains et un coeur.</li> <li>Un animal est un \u00eatre vivant qui a aussi un corps</li> <li>Une plante est un \u00eatre vivant (qui n'a pas de corps)</li> </ul>"},{"location":"poo/uml/#exercice-3","title":"Exercice 3","text":"<p>Mod\u00e9liser en UML les diagrammes de classe des cas suivants:</p> <ul> <li>Une \u00e9cole</li> <li>Un garage de m\u00e9canicien</li> <li>Un jeu de combat en 1v1</li> <li>Les exercices pr\u00e9c\u00e9dents</li> </ul> <p>Une fois les diagrammes r\u00e9alis\u00e9s, coder les classes et instancier quelques objets.</p>"},{"location":"poo/uml/#exercice-4","title":"Exercice 4","text":"<p>D\u00e9velopper une programme de gestion d\u2019une m\u00e9diath\u00e8que. On doit pouvoir stocker diff\u00e9rents types de m\u00e9dias : audio, vid\u00e9o, texte (comme un livre ou un journal).</p> <ul> <li>Les audio et vid\u00e9o peuvent \u00eatre \u00e9cout\u00e9s, le texte peut \u00eatre lu et les vid\u00e9os peuvent \u00eatre visualis\u00e9es.</li> <li>Chaque objet d\u2019un de ces m\u00e9dias doit avoir au minimum un nom, un format (l'extension du fichier), une taille (en octets).</li> <li>On veut pouvoir trier les m\u00e9dias selon le nom ou la taille par ordre croissant ou d\u00e9croissant.</li> <li>Un texte contient en plus une propri\u00e9t\u00e9 \"contenu\" ainsi que deux m\u00e9thodes suppl\u00e9mentaires, la premi\u00e8re renvoie le nombre de consonnes du contenu, la deuxi\u00e8me le nombre de mots du contenu.</li> </ul> <p>Questions :</p> <ul> <li>\ud83d\udc49 Dessiner le diagramme de classes UML et coder les diff\u00e9rentes classes.</li> <li> <p>\ud83d\udc49 Instancier une m\u00e9diath\u00e8que contenant deux audios, une vid\u00e9o et trois textes. Vous \u00eates libre de valoriser les propri\u00e9t\u00e9s \u00e0 votre guise. Vous pouvez vous faire aider de certains sites si besoin (g\u00e9n\u00e9rateur de texte, G\u00e9n\u00e9rateur de nom de livre)</p> </li> <li> <p>\ud83d\udc49 Afficher les m\u00e9dias tri\u00e9s par nom par ordre croissant et par taille par ordre d\u00e9croissant.</p> </li> <li>\ud83d\udc49 Afficher le nombre de consonnes de tous les textes de la m\u00e9diath\u00e8que</li> <li>\ud83d\udc49 Afficher le nombre de consonnes de tous les textes de la m\u00e9diath\u00e8que</li> </ul> <p>On souhaite aussi stocker des textes audio qui sont des textes qu'on peut \u00e9couter.</p> <ul> <li>\ud83d\udc49 Dessiner le nouveau diagramme UML de classes UML et mettre \u00e0 jour votre code en cons\u00e9quence.</li> <li>\ud83d\udc49 Ajouter deux textes audio dans la m\u00e9diath\u00e8que</li> </ul> <p>On souhaite simuler l'interaction des humains avec la m\u00e9diath\u00e8que. Chaque jour, une seule personne entre dans la m\u00e9diath\u00e8que et ressort le m\u00eame jour. Chaque personne effectue une seule action puis ressort. On suppose qu'il n'y a qu'une seule personne dans la m\u00e9diath\u00e8que \u00e0 la fois et peut effectuer une de ces actions al\u00e9atoirement:</p> <ul> <li>Soit louer une vid\u00e9o disponible (non lou\u00e9). Un film lou\u00e9 sera rendu apr\u00e8s 10 jours,</li> <li>Soit louer un texte ou un audio disponible (non lou\u00e9). Un texte lou\u00e9 sera rendu dans 4 et un audio dans 5 jours,</li> <li> <p>Soit \u00e9couter une vid\u00e9o, un audio ou texte audio disponible (non lou\u00e9).</p> </li> <li> <p>\ud83d\udc49 Dessiner le diagramme de classes UML et coder les diff\u00e9rentes classes.</p> </li> <li>\ud83d\udc49 Ecrire un programme qui r\u00e9alise cette simulation pendant 1 mois (30 jours).</li> <li>\ud83d\udc49 A la fin du mois, afficher des statistiques sur le nombre de films et textes lou\u00e9s ainsi que le nombre d'\u00e9l\u00e9ments \u00e9cout\u00e9s.</li> </ul> <p>Le propri\u00e9taire de la m\u00e9diath\u00e8que permet de faire du CRUD (Create, Read, Update, Delete) sur la m\u00e9diath\u00e8que. Une personne peut \u00eatre propri\u00e9taire d'une seule m\u00e9diath\u00e8ques.</p> <ul> <li>\ud83d\udc49 Dessiner le diagramme de classes UML et coder les diff\u00e9rentes classes.</li> <li>\ud83d\udc49 D\u00e9velopper les diff\u00e9rentes m\u00e9thodes CRUD</li> <li>\ud83d\udc49 Effectuer ces actions via le propri\u00e9taire: ajouter une vid\u00e9o, afficher le contenu d'un texte, modifier un texte et supprimer un audio</li> </ul> Corrig\u00e9 <p></p> <pre><code>import random\nfrom typing import List\n\n\nclass Media:\n    days_of_rent = 0\n\n    def __init__(self, name, extension, size) -&gt; None:\n        self.name = name\n        self.extension = extension\n        self.size = size\n        self.current_rented_days = 0\n\n    def play(self):\n        print(\"Ledcture de\", self)\n\n    def is_rented(self):\n        return self.current_rented_days &gt; 0\n\n    def __str__(self) -&gt; str:\n        if self.is_rented():\n            return f\"{self.__class__.__name__} (name={self.name}, sera rendu dans {self.current_rented_days} jour(s)))\"\n        else:\n            return f\"{self.__class__.__name__} (name={self.name}, non lou\u00e9)\"\n\n    def __repr__(self) -&gt; str:\n        return self.__str__()\n\n\nclass Video(Media):\n    days_of_rent = 10\n\n    def __init__(self, name, extension, size) -&gt; None:\n        super().__init__(name, extension, size)\n\n\nclass Audio(Media):\n    days_of_rent = 5\n\n    def __init__(self, name, extension, size) -&gt; None:\n        super().__init__(name, extension, size)\n\n\nclass Text(Media):\n    days_of_rent = 4\n\n    def __init__(self, name, extension, content: str) -&gt; None:\n        super().__init__(name, extension, len(content))\n        self.content = content\n\n    def get_word_count(self):\n        return len(self.content.split(\"\"))\n\n    def get_consonant_count(self):\n        count = 0\n        for x in self.content:\n            if x not in \"aiueo\":\n                count += 1\n        return count\n\n    def get_consonant_count_2(self):\n        return len([x not in \"aiueo\" for x in self.content])\n\n\nclass MediaLibrary:\n    def __init__(self, medias: List[Media]) -&gt; None:\n        self.medias = medias\n\n    def show_sorted_medias_by_size(self, descending=False):\n        sorted_list = sorted(self.medias, key=lambda m: m.size, reverse=descending)\n        print(f\"tris par espace (d\u00e9croissant {descending})\", sorted_list)\n\n    def show_sorted_medias_by_name(self, descending=False):\n        sorted_list = sorted(self.medias, key=lambda m: m.name, reverse=descending)\n        names = [x.name for x in sorted_list]\n        print(\"noms tri\u00e9s (ordre d\u00e9croissant {descending})\", names)\n\n    def __str__(self) -&gt; str:\n        return f\"Contenu de la m\u00e9diath\u00e8que: {self.medias}\"\n\n    def advance_rental(self):\n        for media in self.medias:\n            media.current_rented_days = max(media.current_rented_days - 1, 0)\n\n    def get_all_consonant_count(self):\n        counts = [x.get_consonant_count() for x in self.medias if isinstance(x, Text)]\n        return sum(counts)\n\n\nclass Person:\n    def __init__(self):\n        pass\n\n    def perform_random_action(self, mediatheque: MediaLibrary):\n        action = random.randint(0, 2)\n        if action == 0:\n            videos = [\n                x\n                for x in mediatheque.medias\n                if isinstance(x, Video) and not x.is_rented()\n            ]\n            if len(videos) == 0:\n                print(\"Aucune vid\u00e9o disponible \u00e0 la location\")\n                return\n            r = random.randint(0, len(videos) - 1)\n            videos[r].current_rented_days = Video.days_of_rent\n            print(\"location de la vid\u00e9o\", videos[r])\n        if action == 1:\n            audios_texts = [\n                x\n                for x in mediatheque.medias\n                if (isinstance(x, Audio) or isinstance(x, Text)) and not x.is_rented()\n            ]\n            if len(audios_texts) == 0:\n                print(\"Aucun media disponible \u00e0 la location\")\n                return\n            r = random.randint(0, len(audios_texts) - 1)\n            audios_texts[r].current_rented_days = Audio.days_of_rent\n            print(\"location du media\", audios_texts[r])\n        else:\n            available_medias = [x for x in mediatheque.medias if not x.is_rented()]\n            if len(available_medias) == 0:\n                print(\"Auncun m\u00e9dia disponible \u00e0 la lecture\")\n                return\n            r = random.randint(0, len(available_medias) - 1)\n            available_medias[r].play()\n\n\nclass Owner(Person):\n    def __init__(self, mediatheque: MediaLibrary):\n        super().__init__()\n        self.media_library = mediatheque\n\n    def create_media(self, media):\n        self.media_library.medias.append(media)\n\n    def read_media(self, index):\n        print(\"lecture du m\u00e9dia\", self.media_library.medias[index])\n        return self.media_library.medias[index]\n\n    def update_media(self, index, newValues):\n        self.media_library.medias[index] = newValues\n\n    def delete_media(self, index):\n        self.media_library.medias.pop(index)\n\n\nlivre = Text(\"20000 lieux sous les mers\", \"epub\", \"plouf dans l'eau\")\n\nmedia_library = MediaLibrary(\n    [\n        Audio(\"Grand bleu\", \"mp3\", 3_000_000),\n        Audio(\"Chouzetsu Dynamic\", \"mp3\", 3_000_000),\n        Video(\"naruto last movie\", \"mp3\", 1_000_000_000),\n        livre,\n        Text(\"Les 12 travaux d'Ast\u00e9rix\", \"epub\", \"12\"),\n        Text(\"Classroom of the elite\", \"pdf\", \"Ayanokoji Kyotaka\"),\n    ]\n)\n\nmedia_library.show_sorted_medias_by_name()\nmedia_library.show_sorted_medias_by_size(True)\n\nprint(\"nombre de consonnes de\", livre, \"est\", livre.get_consonant_count_2())\nprint(\n    \"nombre de consonnes dans la m\u00e9diath\u00e8qye\", media_library.get_all_consonant_count()\n)\n\nowner = Owner(media_library)\nowner.create_media(Video(\"Spy x familiy code white\", \"mov\", 2_000_000_000))\nprint(owner.media_library)\nowner.delete_media(0)\nprint(owner.media_library)\nowner.read_media(2)\n\n\nprint(\"simulation sur 30 jours\")\nfor day in range(30):\n    media_library.advance_rental()\n    print(\"nouvelle journ\u00e9e\")\n    person = Person()\n    person.perform_random_action(media_library)\n\nprint(media_library)\n</code></pre>"}]}